// Copyright (c) 2018 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
//
// WSO2 Inc. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// This file is a auto genrated from org.bytedeco.javacpp.LLVM java class

public extern function LLVMModuleCreateWithName(string arg0) returns LLVMModuleRef;
// public extern function LLVMModuleCreateWithName(BytePointer arg0) returns LLVMModuleRef;
// public extern function LLVMLoadLibraryPermanently(BytePointer arg0) returns int;
// public extern function LLVMLoadLibraryPermanently(string arg0) returns int;
// public extern function LLVMParseCommandLineOptions(int arg0, BytePointer arg1, string arg2);
// public extern function LLVMParseCommandLineOptions(int arg0, ByteBuffer arg1, BytePointer arg2);
// public extern function LLVMParseCommandLineOptions(int arg0, byte[] arg1, string arg2);
// public extern function LLVMParseCommandLineOptions(int arg0, PointerPointer arg1, BytePointer arg2);
// public extern function LLVMParseCommandLineOptions(int arg0, BytePointer arg1, BytePointer arg2);
// public extern function LLVMParseCommandLineOptions(int arg0, ByteBuffer arg1, string arg2);
// public extern function LLVMParseCommandLineOptions(int arg0, byte[] arg1, BytePointer arg2);
// public extern function LLVMSearchForAddressOfSymbol(string arg0) returns Pointer;
// public extern function LLVMSearchForAddressOfSymbol(BytePointer arg0) returns Pointer;
// public extern function LLVMAddSymbol(BytePointer arg0, Pointer arg1);
// public extern function LLVMAddSymbol(string arg0, Pointer arg1);
// public extern function LLVMInitializeCore(LLVMPassRegistryRef arg0);
// public extern function LLVMShutdown();
// public extern function LLVMCreateMessage(string arg0) returns ByteBuffer;
// public extern function LLVMCreateMessage(BytePointer arg0) returns BytePointer;
// public extern function LLVMDisposeMessage(byte[] arg0);
// public extern function LLVMDisposeMessage(BytePointer arg0);
// public extern function LLVMDisposeMessage(ByteBuffer arg0);
// public extern function LLVMContextCreate() returns LLVMContextRef;
// public extern function LLVMGetGlobalContext() returns LLVMContextRef;
// public extern function LLVMContextSetDiagnosticHandler(LLVMContextRef arg0, LLVMDiagnosticHandler arg1, Pointer arg2);
// public extern function LLVMContextGetDiagnosticHandler(LLVMContextRef arg0) returns LLVMDiagnosticHandler;
// public extern function LLVMContextGetDiagnosticContext(LLVMContextRef arg0) returns Pointer;
// public extern function LLVMContextSetYieldCallback(LLVMContextRef arg0, LLVMYieldCallback arg1, Pointer arg2);
// public extern function LLVMContextDispose(LLVMContextRef arg0);
// public extern function LLVMGetDiagInfoDescription(LLVMDiagnosticInfoRef arg0) returns BytePointer;
// public extern function LLVMGetDiagInfoSeverity(LLVMDiagnosticInfoRef arg0) returns int;
// public extern function LLVMGetMDKindIDInContext(LLVMContextRef arg0, BytePointer arg1, int arg2) returns int;
// public extern function LLVMGetMDKindIDInContext(LLVMContextRef arg0, string arg1, int arg2) returns int;
// public extern function LLVMGetMDKindID(string arg0, int arg1) returns int;
// public extern function LLVMGetMDKindID(BytePointer arg0, int arg1) returns int;
// public extern function LLVMGetEnumAttributeKindForName(string arg0, long arg1) returns int;
// public extern function LLVMGetEnumAttributeKindForName(BytePointer arg0, long arg1) returns int;
// public extern function LLVMGetLastEnumAttributeKind() returns int;
// public extern function LLVMCreateEnumAttribute(LLVMContextRef arg0, int arg1, long arg2) returns LLVMAttributeRef;
// public extern function LLVMGetEnumAttributeKind(LLVMAttributeRef arg0) returns int;
// public extern function LLVMGetEnumAttributeValue(LLVMAttributeRef arg0) returns long;
// public extern function LLVMCreateStringAttribute(LLVMContextRef arg0, string arg1, int arg2, string arg3, int arg4) returns LLVMAttributeRef;
// public extern function LLVMCreateStringAttribute(LLVMContextRef arg0, BytePointer arg1, int arg2, BytePointer arg3, int arg4) returns LLVMAttributeRef;
// public extern function LLVMGetStringAttributeKind(LLVMAttributeRef arg0, int[] arg1) returns BytePointer;
// public extern function LLVMGetStringAttributeKind(LLVMAttributeRef arg0, IntBuffer arg1) returns string;
// public extern function LLVMGetStringAttributeKind(LLVMAttributeRef arg0, IntPointer arg1) returns BytePointer;
// public extern function LLVMGetStringAttributeValue(LLVMAttributeRef arg0, int[] arg1) returns BytePointer;
// public extern function LLVMGetStringAttributeValue(LLVMAttributeRef arg0, IntPointer arg1) returns BytePointer;
// public extern function LLVMGetStringAttributeValue(LLVMAttributeRef arg0, IntBuffer arg1) returns string;
// public extern function LLVMIsEnumAttribute(LLVMAttributeRef arg0) returns int;
// public extern function LLVMIsStringAttribute(LLVMAttributeRef arg0) returns int;
// public extern function LLVMModuleCreateWithNameInContext(BytePointer arg0, LLVMContextRef arg1) returns LLVMModuleRef;
// public extern function LLVMModuleCreateWithNameInContext(string arg0, LLVMContextRef arg1) returns LLVMModuleRef;
// public extern function LLVMCloneModule(LLVMModuleRef arg0) returns LLVMModuleRef;
// public extern function LLVMDisposeModule(LLVMModuleRef arg0);
// public extern function LLVMGetModuleIdentifier(LLVMModuleRef arg0, SizeTPointer arg1) returns BytePointer;
// public extern function LLVMSetModuleIdentifier(LLVMModuleRef arg0, string arg1, long arg2);
// public extern function LLVMSetModuleIdentifier(LLVMModuleRef arg0, BytePointer arg1, long arg2);
// public extern function LLVMGetDataLayoutStr(LLVMModuleRef arg0) returns BytePointer;
// public extern function LLVMGetDataLayout(LLVMModuleRef arg0) returns BytePointer;
// public extern function LLVMSetDataLayout(LLVMModuleRef arg0, BytePointer arg1);
// public extern function LLVMSetDataLayout(LLVMModuleRef arg0, string arg1);
// public extern function LLVMGetTarget(LLVMModuleRef arg0) returns BytePointer;
// public extern function LLVMSetTarget(LLVMModuleRef arg0, string arg1);
// public extern function LLVMSetTarget(LLVMModuleRef arg0, BytePointer arg1);
// public extern function LLVMDumpModule(LLVMModuleRef arg0);
// public extern function LLVMPrintModuleToFile(LLVMModuleRef arg0, string arg1, ByteBuffer arg2) returns int;
// public extern function LLVMPrintModuleToFile(LLVMModuleRef arg0, BytePointer arg1, byte[] arg2) returns int;
// public extern function LLVMPrintModuleToFile(LLVMModuleRef arg0, string arg1, BytePointer arg2) returns int;
// public extern function LLVMPrintModuleToFile(LLVMModuleRef arg0, BytePointer arg1, ByteBuffer arg2) returns int;
// public extern function LLVMPrintModuleToFile(LLVMModuleRef arg0, string arg1, byte[] arg2) returns int;
// public extern function LLVMPrintModuleToFile(LLVMModuleRef arg0, BytePointer arg1, PointerPointer arg2) returns int;
// public extern function LLVMPrintModuleToFile(LLVMModuleRef arg0, BytePointer arg1, BytePointer arg2) returns int;
// public extern function LLVMPrintModuleToString(LLVMModuleRef arg0) returns BytePointer;
// public extern function LLVMSetModuleInlineAsm(LLVMModuleRef arg0, string arg1);
// public extern function LLVMSetModuleInlineAsm(LLVMModuleRef arg0, BytePointer arg1);
// public extern function LLVMGetModuleContext(LLVMModuleRef arg0) returns LLVMContextRef;
// public extern function LLVMGetTypeByName(LLVMModuleRef arg0, string arg1) returns LLVMTypeRef;
// public extern function LLVMGetTypeByName(LLVMModuleRef arg0, BytePointer arg1) returns LLVMTypeRef;
// public extern function LLVMGetNamedMetadataNumOperands(LLVMModuleRef arg0, BytePointer arg1) returns int;
// public extern function LLVMGetNamedMetadataNumOperands(LLVMModuleRef arg0, string arg1) returns int;
// public extern function LLVMGetNamedMetadataOperands(LLVMModuleRef arg0, BytePointer arg1, LLVMValueRef arg2);
// public extern function LLVMGetNamedMetadataOperands(LLVMModuleRef arg0, string arg1, PointerPointer arg2);
// public extern function LLVMAddNamedMetadataOperand(LLVMModuleRef arg0, string arg1, LLVMValueRef arg2);
// public extern function LLVMAddNamedMetadataOperand(LLVMModuleRef arg0, BytePointer arg1, LLVMValueRef arg2);
// public extern function LLVMAddFunction(LLVMModuleRef arg0, string arg1, LLVMTypeRef arg2) returns LLVMValueRef;
// public extern function LLVMAddFunction(LLVMModuleRef arg0, BytePointer arg1, LLVMTypeRef arg2) returns LLVMValueRef;
// public extern function LLVMGetNamedFunction(LLVMModuleRef arg0, BytePointer arg1) returns LLVMValueRef;
// public extern function LLVMGetNamedFunction(LLVMModuleRef arg0, string arg1) returns LLVMValueRef;
// public extern function LLVMGetFirstFunction(LLVMModuleRef arg0) returns LLVMValueRef;
// public extern function LLVMGetLastFunction(LLVMModuleRef arg0) returns LLVMValueRef;
// public extern function LLVMGetNextFunction(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMGetPreviousFunction(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMGetTypeKind(LLVMTypeRef arg0) returns int;
// public extern function LLVMTypeIsSized(LLVMTypeRef arg0) returns int;
// public extern function LLVMGetTypeContext(LLVMTypeRef arg0) returns LLVMContextRef;
// public extern function LLVMPrintTypeToString(LLVMTypeRef arg0) returns BytePointer;
// public extern function LLVMInt1TypeInContext(LLVMContextRef arg0) returns LLVMTypeRef;
// public extern function LLVMInt8TypeInContext(LLVMContextRef arg0) returns LLVMTypeRef;
// public extern function LLVMInt16TypeInContext(LLVMContextRef arg0) returns LLVMTypeRef;
// public extern function LLVMInt32TypeInContext(LLVMContextRef arg0) returns LLVMTypeRef;
// public extern function LLVMInt64TypeInContext(LLVMContextRef arg0) returns LLVMTypeRef;
// public extern function LLVMInt128TypeInContext(LLVMContextRef arg0) returns LLVMTypeRef;
// public extern function LLVMIntTypeInContext(LLVMContextRef arg0, int arg1) returns LLVMTypeRef;
// public extern function LLVMInt1Type() returns LLVMTypeRef;
// public extern function LLVMInt8Type() returns LLVMTypeRef;
// public extern function LLVMInt16Type() returns LLVMTypeRef;
// public extern function LLVMInt32Type() returns LLVMTypeRef;
// public extern function LLVMInt64Type() returns LLVMTypeRef;
// public extern function LLVMInt128Type() returns LLVMTypeRef;
// public extern function LLVMIntType(int arg0) returns LLVMTypeRef;
// public extern function LLVMGetIntTypeWidth(LLVMTypeRef arg0) returns int;
// public extern function LLVMHalfTypeInContext(LLVMContextRef arg0) returns LLVMTypeRef;
// public extern function LLVMFloatTypeInContext(LLVMContextRef arg0) returns LLVMTypeRef;
// public extern function LLVMDoubleTypeInContext(LLVMContextRef arg0) returns LLVMTypeRef;
// public extern function LLVMX86FP80TypeInContext(LLVMContextRef arg0) returns LLVMTypeRef;
// public extern function LLVMFP128TypeInContext(LLVMContextRef arg0) returns LLVMTypeRef;
// public extern function LLVMPPCFP128TypeInContext(LLVMContextRef arg0) returns LLVMTypeRef;
// public extern function LLVMHalfType() returns LLVMTypeRef;
// public extern function LLVMFloatType() returns LLVMTypeRef;
// public extern function LLVMDoubleType() returns LLVMTypeRef;
// public extern function LLVMX86FP80Type() returns LLVMTypeRef;
// public extern function LLVMFP128Type() returns LLVMTypeRef;
// public extern function LLVMPPCFP128Type() returns LLVMTypeRef;
// public extern function LLVMFunctionType(LLVMTypeRef arg0, LLVMTypeRef arg1, int arg2, int arg3) returns LLVMTypeRef;
// public extern function LLVMFunctionType(LLVMTypeRef arg0, PointerPointer arg1, int arg2, int arg3) returns LLVMTypeRef;
// public extern function LLVMIsFunctionVarArg(LLVMTypeRef arg0) returns int;
// public extern function LLVMGetReturnType(LLVMTypeRef arg0) returns LLVMTypeRef;
// public extern function LLVMCountParamTypes(LLVMTypeRef arg0) returns int;
// public extern function LLVMGetParamTypes(LLVMTypeRef arg0, PointerPointer arg1);
// public extern function LLVMGetParamTypes(LLVMTypeRef arg0, LLVMTypeRef arg1);
// public extern function LLVMStructTypeInContext(LLVMContextRef arg0, LLVMTypeRef arg1, int arg2, int arg3) returns LLVMTypeRef;
// public extern function LLVMStructTypeInContext(LLVMContextRef arg0, PointerPointer arg1, int arg2, int arg3) returns LLVMTypeRef;
// public extern function LLVMStructType(PointerPointer arg0, int arg1, int arg2) returns LLVMTypeRef;
// public extern function LLVMStructType(LLVMTypeRef arg0, int arg1, int arg2) returns LLVMTypeRef;
// public extern function LLVMStructCreateNamed(LLVMContextRef arg0, BytePointer arg1) returns LLVMTypeRef;
// public extern function LLVMStructCreateNamed(LLVMContextRef arg0, string arg1) returns LLVMTypeRef;
// public extern function LLVMGetStructName(LLVMTypeRef arg0) returns BytePointer;
// public extern function LLVMStructSetBody(LLVMTypeRef arg0, LLVMTypeRef arg1, int arg2, int arg3);
// public extern function LLVMStructSetBody(LLVMTypeRef arg0, PointerPointer arg1, int arg2, int arg3);
// public extern function LLVMCountStructElementTypes(LLVMTypeRef arg0) returns int;
// public extern function LLVMGetStructElementTypes(LLVMTypeRef arg0, LLVMTypeRef arg1);
// public extern function LLVMGetStructElementTypes(LLVMTypeRef arg0, PointerPointer arg1);
// public extern function LLVMStructGetTypeAtIndex(LLVMTypeRef arg0, int arg1) returns LLVMTypeRef;
// public extern function LLVMIsPackedStruct(LLVMTypeRef arg0) returns int;
// public extern function LLVMIsOpaqueStruct(LLVMTypeRef arg0) returns int;
// public extern function LLVMGetElementType(LLVMTypeRef arg0) returns LLVMTypeRef;
// public extern function LLVMGetSubtypes(LLVMTypeRef arg0, PointerPointer arg1);
// public extern function LLVMGetSubtypes(LLVMTypeRef arg0, LLVMTypeRef arg1);
// public extern function LLVMGetNumContainedTypes(LLVMTypeRef arg0) returns int;
// public extern function LLVMArrayType(LLVMTypeRef arg0, int arg1) returns LLVMTypeRef;
// public extern function LLVMGetArrayLength(LLVMTypeRef arg0) returns int;
// public extern function LLVMPointerType(LLVMTypeRef arg0, int arg1) returns LLVMTypeRef;
// public extern function LLVMGetPointerAddressSpace(LLVMTypeRef arg0) returns int;
// public extern function LLVMVectorType(LLVMTypeRef arg0, int arg1) returns LLVMTypeRef;
// public extern function LLVMGetVectorSize(LLVMTypeRef arg0) returns int;
// public extern function LLVMVoidTypeInContext(LLVMContextRef arg0) returns LLVMTypeRef;
// public extern function LLVMLabelTypeInContext(LLVMContextRef arg0) returns LLVMTypeRef;
// public extern function LLVMX86MMXTypeInContext(LLVMContextRef arg0) returns LLVMTypeRef;
// public extern function LLVMTokenTypeInContext(LLVMContextRef arg0) returns LLVMTypeRef;
// public extern function LLVMMetadataTypeInContext(LLVMContextRef arg0) returns LLVMTypeRef;
// public extern function LLVMVoidType() returns LLVMTypeRef;
// public extern function LLVMLabelType() returns LLVMTypeRef;
// public extern function LLVMX86MMXType() returns LLVMTypeRef;
// public extern function LLVMTypeOf(LLVMValueRef arg0) returns LLVMTypeRef;
// public extern function LLVMGetValueKind(LLVMValueRef arg0) returns int;
// public extern function LLVMGetValueName(LLVMValueRef arg0) returns BytePointer;
// public extern function LLVMSetValueName(LLVMValueRef arg0, BytePointer arg1);
// public extern function LLVMSetValueName(LLVMValueRef arg0, string arg1);
// public extern function LLVMDumpValue(LLVMValueRef arg0);
// public extern function LLVMPrintValueToString(LLVMValueRef arg0) returns BytePointer;
// public extern function LLVMReplaceAllUsesWith(LLVMValueRef arg0, LLVMValueRef arg1);
// public extern function LLVMIsConstant(LLVMValueRef arg0) returns int;
// public extern function LLVMIsUndef(LLVMValueRef arg0) returns int;
// public extern function LLVMIsAArgument(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsABasicBlock(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAInlineAsm(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAUser(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAConstant(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsABlockAddress(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAConstantAggregateZero(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAConstantArray(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAConstantDataSequential(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAConstantDataArray(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAConstantDataVector(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAConstantExpr(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAConstantFP(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAConstantInt(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAConstantPointerNull(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAConstantStruct(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAConstantTokenNone(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAConstantVector(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAGlobalValue(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAGlobalAlias(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAGlobalObject(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAFunction(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAGlobalVariable(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAUndefValue(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAInstruction(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsABinaryOperator(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsACallInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAIntrinsicInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsADbgInfoIntrinsic(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsADbgDeclareInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAMemIntrinsic(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAMemCpyInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAMemMoveInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAMemSetInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsACmpInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAFCmpInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAICmpInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAExtractElementInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAGetElementPtrInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAInsertElementInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAInsertValueInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsALandingPadInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAPHINode(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsASelectInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAShuffleVectorInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAStoreInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsATerminatorInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsABranchInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAIndirectBrInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAInvokeInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAReturnInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsASwitchInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAUnreachableInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAResumeInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsACleanupReturnInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsACatchReturnInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAFuncletPadInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsACatchPadInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsACleanupPadInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAUnaryInstruction(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAAllocaInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsACastInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAAddrSpaceCastInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsABitCastInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAFPExtInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAFPToSIInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAFPToUIInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAFPTruncInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAIntToPtrInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAPtrToIntInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsASExtInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsASIToFPInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsATruncInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAUIToFPInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAZExtInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAExtractValueInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsALoadInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAVAArgInst(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAMDNode(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsAMDString(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMGetFirstUse(LLVMValueRef arg0) returns LLVMUseRef;
// public extern function LLVMGetNextUse(LLVMUseRef arg0) returns LLVMUseRef;
// public extern function LLVMGetUser(LLVMUseRef arg0) returns LLVMValueRef;
// public extern function LLVMGetUsedValue(LLVMUseRef arg0) returns LLVMValueRef;
// public extern function LLVMGetOperand(LLVMValueRef arg0, int arg1) returns LLVMValueRef;
// public extern function LLVMGetOperandUse(LLVMValueRef arg0, int arg1) returns LLVMUseRef;
// public extern function LLVMSetOperand(LLVMValueRef arg0, int arg1, LLVMValueRef arg2);
// public extern function LLVMGetNumOperands(LLVMValueRef arg0) returns int;
// public extern function LLVMConstNull(LLVMTypeRef arg0) returns LLVMValueRef;
// public extern function LLVMConstAllOnes(LLVMTypeRef arg0) returns LLVMValueRef;
// public extern function LLVMGetUndef(LLVMTypeRef arg0) returns LLVMValueRef;
// public extern function LLVMIsNull(LLVMValueRef arg0) returns int;
// public extern function LLVMConstPointerNull(LLVMTypeRef arg0) returns LLVMValueRef;
// public extern function LLVMConstInt(LLVMTypeRef arg0, long arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMConstIntOfArbitraryPrecision(LLVMTypeRef arg0, int arg1, LongPointer arg2) returns LLVMValueRef;
// public extern function LLVMConstIntOfArbitraryPrecision(LLVMTypeRef arg0, int arg1, LongBuffer arg2) returns LLVMValueRef;
// public extern function LLVMConstIntOfArbitraryPrecision(LLVMTypeRef arg0, int arg1, long[] arg2) returns LLVMValueRef;
// public extern function LLVMConstIntOfString(LLVMTypeRef arg0, BytePointer arg1, byte arg2) returns LLVMValueRef;
// public extern function LLVMConstIntOfString(LLVMTypeRef arg0, string arg1, byte arg2) returns LLVMValueRef;
// public extern function LLVMConstIntOfStringAndSize(LLVMTypeRef arg0, string arg1, int arg2, byte arg3) returns LLVMValueRef;
// public extern function LLVMConstIntOfStringAndSize(LLVMTypeRef arg0, BytePointer arg1, int arg2, byte arg3) returns LLVMValueRef;
// public extern function LLVMConstReal(LLVMTypeRef arg0, double arg1) returns LLVMValueRef;
// public extern function LLVMConstRealOfString(LLVMTypeRef arg0, string arg1) returns LLVMValueRef;
// public extern function LLVMConstRealOfString(LLVMTypeRef arg0, BytePointer arg1) returns LLVMValueRef;
// public extern function LLVMConstRealOfStringAndSize(LLVMTypeRef arg0, BytePointer arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMConstRealOfStringAndSize(LLVMTypeRef arg0, string arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMConstIntGetZExtValue(LLVMValueRef arg0) returns long;
// public extern function LLVMConstIntGetSExtValue(LLVMValueRef arg0) returns long;
// public extern function LLVMConstRealGetDouble(LLVMValueRef arg0, IntPointer arg1) returns double;
// public extern function LLVMConstRealGetDouble(LLVMValueRef arg0, int[] arg1) returns double;
// public extern function LLVMConstRealGetDouble(LLVMValueRef arg0, IntBuffer arg1) returns double;
// public extern function LLVMConstStringInContext(LLVMContextRef arg0, BytePointer arg1, int arg2, int arg3) returns LLVMValueRef;
// public extern function LLVMConstStringInContext(LLVMContextRef arg0, string arg1, int arg2, int arg3) returns LLVMValueRef;
// public extern function LLVMConstString(BytePointer arg0, int arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMConstString(string arg0, int arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMIsConstantString(LLVMValueRef arg0) returns int;
// public extern function LLVMGetAsString(LLVMValueRef arg0, SizeTPointer arg1) returns BytePointer;
// public extern function LLVMConstStructInContext(LLVMContextRef arg0, LLVMValueRef arg1, int arg2, int arg3) returns LLVMValueRef;
// public extern function LLVMConstStructInContext(LLVMContextRef arg0, PointerPointer arg1, int arg2, int arg3) returns LLVMValueRef;
// public extern function LLVMConstStruct(LLVMValueRef arg0, int arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMConstStruct(PointerPointer arg0, int arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMConstArray(LLVMTypeRef arg0, LLVMValueRef arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMConstArray(LLVMTypeRef arg0, PointerPointer arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMConstNamedStruct(LLVMTypeRef arg0, PointerPointer arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMConstNamedStruct(LLVMTypeRef arg0, LLVMValueRef arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMGetElementAsConstant(LLVMValueRef arg0, int arg1) returns LLVMValueRef;
// public extern function LLVMConstVector(PointerPointer arg0, int arg1) returns LLVMValueRef;
// public extern function LLVMConstVector(LLVMValueRef arg0, int arg1) returns LLVMValueRef;
// public extern function LLVMGetConstOpcode(LLVMValueRef arg0) returns int;
// public extern function LLVMAlignOf(LLVMTypeRef arg0) returns LLVMValueRef;
// public extern function LLVMSizeOf(LLVMTypeRef arg0) returns LLVMValueRef;
// public extern function LLVMConstNeg(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMConstNSWNeg(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMConstNUWNeg(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMConstFNeg(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMConstNot(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMConstAdd(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstNSWAdd(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstNUWAdd(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstFAdd(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstSub(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstNSWSub(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstNUWSub(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstFSub(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstMul(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstNSWMul(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstNUWMul(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstFMul(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstUDiv(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstExactUDiv(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstSDiv(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstExactSDiv(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstFDiv(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstURem(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstSRem(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstFRem(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstAnd(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstOr(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstXor(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstICmp(int arg0, LLVMValueRef arg1, LLVMValueRef arg2) returns LLVMValueRef;
// public extern function LLVMConstFCmp(int arg0, LLVMValueRef arg1, LLVMValueRef arg2) returns LLVMValueRef;
// public extern function LLVMConstShl(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstLShr(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstAShr(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstGEP(LLVMValueRef arg0, LLVMValueRef arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMConstGEP(LLVMValueRef arg0, PointerPointer arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMConstInBoundsGEP(LLVMValueRef arg0, LLVMValueRef arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMConstInBoundsGEP(LLVMValueRef arg0, PointerPointer arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMConstTrunc(LLVMValueRef arg0, LLVMTypeRef arg1) returns LLVMValueRef;
// public extern function LLVMConstSExt(LLVMValueRef arg0, LLVMTypeRef arg1) returns LLVMValueRef;
// public extern function LLVMConstZExt(LLVMValueRef arg0, LLVMTypeRef arg1) returns LLVMValueRef;
// public extern function LLVMConstFPTrunc(LLVMValueRef arg0, LLVMTypeRef arg1) returns LLVMValueRef;
// public extern function LLVMConstFPExt(LLVMValueRef arg0, LLVMTypeRef arg1) returns LLVMValueRef;
// public extern function LLVMConstUIToFP(LLVMValueRef arg0, LLVMTypeRef arg1) returns LLVMValueRef;
// public extern function LLVMConstSIToFP(LLVMValueRef arg0, LLVMTypeRef arg1) returns LLVMValueRef;
// public extern function LLVMConstFPToUI(LLVMValueRef arg0, LLVMTypeRef arg1) returns LLVMValueRef;
// public extern function LLVMConstFPToSI(LLVMValueRef arg0, LLVMTypeRef arg1) returns LLVMValueRef;
// public extern function LLVMConstPtrToInt(LLVMValueRef arg0, LLVMTypeRef arg1) returns LLVMValueRef;
// public extern function LLVMConstIntToPtr(LLVMValueRef arg0, LLVMTypeRef arg1) returns LLVMValueRef;
// public extern function LLVMConstBitCast(LLVMValueRef arg0, LLVMTypeRef arg1) returns LLVMValueRef;
// public extern function LLVMConstAddrSpaceCast(LLVMValueRef arg0, LLVMTypeRef arg1) returns LLVMValueRef;
// public extern function LLVMConstZExtOrBitCast(LLVMValueRef arg0, LLVMTypeRef arg1) returns LLVMValueRef;
// public extern function LLVMConstSExtOrBitCast(LLVMValueRef arg0, LLVMTypeRef arg1) returns LLVMValueRef;
// public extern function LLVMConstTruncOrBitCast(LLVMValueRef arg0, LLVMTypeRef arg1) returns LLVMValueRef;
// public extern function LLVMConstPointerCast(LLVMValueRef arg0, LLVMTypeRef arg1) returns LLVMValueRef;
// public extern function LLVMConstIntCast(LLVMValueRef arg0, LLVMTypeRef arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMConstFPCast(LLVMValueRef arg0, LLVMTypeRef arg1) returns LLVMValueRef;
// public extern function LLVMConstSelect(LLVMValueRef arg0, LLVMValueRef arg1, LLVMValueRef arg2) returns LLVMValueRef;
// public extern function LLVMConstExtractElement(LLVMValueRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMConstInsertElement(LLVMValueRef arg0, LLVMValueRef arg1, LLVMValueRef arg2) returns LLVMValueRef;
// public extern function LLVMConstShuffleVector(LLVMValueRef arg0, LLVMValueRef arg1, LLVMValueRef arg2) returns LLVMValueRef;
// public extern function LLVMConstExtractValue(LLVMValueRef arg0, IntPointer arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMConstExtractValue(LLVMValueRef arg0, IntBuffer arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMConstExtractValue(LLVMValueRef arg0, int[] arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMConstInsertValue(LLVMValueRef arg0, LLVMValueRef arg1, IntBuffer arg2, int arg3) returns LLVMValueRef;
// public extern function LLVMConstInsertValue(LLVMValueRef arg0, LLVMValueRef arg1, int[] arg2, int arg3) returns LLVMValueRef;
// public extern function LLVMConstInsertValue(LLVMValueRef arg0, LLVMValueRef arg1, IntPointer arg2, int arg3) returns LLVMValueRef;
// public extern function LLVMConstInlineAsm(LLVMTypeRef arg0, string arg1, string arg2, int arg3, int arg4) returns LLVMValueRef;
// public extern function LLVMConstInlineAsm(LLVMTypeRef arg0, BytePointer arg1, BytePointer arg2, int arg3, int arg4) returns LLVMValueRef;
// public extern function LLVMBlockAddress(LLVMValueRef arg0, LLVMBasicBlockRef arg1) returns LLVMValueRef;
// public extern function LLVMGetGlobalParent(LLVMValueRef arg0) returns LLVMModuleRef;
// public extern function LLVMIsDeclaration(LLVMValueRef arg0) returns int;
// public extern function LLVMGetLinkage(LLVMValueRef arg0) returns int;
// public extern function LLVMSetLinkage(LLVMValueRef arg0, int arg1);
// public extern function LLVMGetSection(LLVMValueRef arg0) returns BytePointer;
// public extern function LLVMSetSection(LLVMValueRef arg0, string arg1);
// public extern function LLVMSetSection(LLVMValueRef arg0, BytePointer arg1);
// public extern function LLVMGetVisibility(LLVMValueRef arg0) returns int;
// public extern function LLVMSetVisibility(LLVMValueRef arg0, int arg1);
// public extern function LLVMGetDLLStorageClass(LLVMValueRef arg0) returns int;
// public extern function LLVMSetDLLStorageClass(LLVMValueRef arg0, int arg1);
// public extern function LLVMHasUnnamedAddr(LLVMValueRef arg0) returns int;
// public extern function LLVMSetUnnamedAddr(LLVMValueRef arg0, int arg1);
// public extern function LLVMGetAlignment(LLVMValueRef arg0) returns int;
// public extern function LLVMSetAlignment(LLVMValueRef arg0, int arg1);
// public extern function LLVMAddGlobal(LLVMModuleRef arg0, LLVMTypeRef arg1, BytePointer arg2) returns LLVMValueRef;
// public extern function LLVMAddGlobal(LLVMModuleRef arg0, LLVMTypeRef arg1, string arg2) returns LLVMValueRef;
// public extern function LLVMAddGlobalInAddressSpace(LLVMModuleRef arg0, LLVMTypeRef arg1, string arg2, int arg3) returns LLVMValueRef;
// public extern function LLVMAddGlobalInAddressSpace(LLVMModuleRef arg0, LLVMTypeRef arg1, BytePointer arg2, int arg3) returns LLVMValueRef;
// public extern function LLVMGetNamedGlobal(LLVMModuleRef arg0, string arg1) returns LLVMValueRef;
// public extern function LLVMGetNamedGlobal(LLVMModuleRef arg0, BytePointer arg1) returns LLVMValueRef;
// public extern function LLVMGetFirstGlobal(LLVMModuleRef arg0) returns LLVMValueRef;
// public extern function LLVMGetLastGlobal(LLVMModuleRef arg0) returns LLVMValueRef;
// public extern function LLVMGetNextGlobal(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMGetPreviousGlobal(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMDeleteGlobal(LLVMValueRef arg0);
// public extern function LLVMGetInitializer(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMSetInitializer(LLVMValueRef arg0, LLVMValueRef arg1);
// public extern function LLVMIsThreadLocal(LLVMValueRef arg0) returns int;
// public extern function LLVMSetThreadLocal(LLVMValueRef arg0, int arg1);
// public extern function LLVMIsGlobalConstant(LLVMValueRef arg0) returns int;
// public extern function LLVMSetGlobalConstant(LLVMValueRef arg0, int arg1);
// public extern function LLVMGetThreadLocalMode(LLVMValueRef arg0) returns int;
// public extern function LLVMSetThreadLocalMode(LLVMValueRef arg0, int arg1);
// public extern function LLVMIsExternallyInitialized(LLVMValueRef arg0) returns int;
// public extern function LLVMSetExternallyInitialized(LLVMValueRef arg0, int arg1);
// public extern function LLVMAddAlias(LLVMModuleRef arg0, LLVMTypeRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMAddAlias(LLVMModuleRef arg0, LLVMTypeRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMDeleteFunction(LLVMValueRef arg0);
// public extern function LLVMHasPersonalityFn(LLVMValueRef arg0) returns int;
// public extern function LLVMGetPersonalityFn(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMSetPersonalityFn(LLVMValueRef arg0, LLVMValueRef arg1);
// public extern function LLVMGetIntrinsicID(LLVMValueRef arg0) returns int;
// public extern function LLVMGetFunctionCallConv(LLVMValueRef arg0) returns int;
// public extern function LLVMSetFunctionCallConv(LLVMValueRef arg0, int arg1);
// public extern function LLVMGetGC(LLVMValueRef arg0) returns BytePointer;
// public extern function LLVMSetGC(LLVMValueRef arg0, BytePointer arg1);
// public extern function LLVMSetGC(LLVMValueRef arg0, string arg1);
// public extern function LLVMAddAttributeAtIndex(LLVMValueRef arg0, int arg1, LLVMAttributeRef arg2);
// public extern function LLVMGetAttributeCountAtIndex(LLVMValueRef arg0, int arg1) returns int;
// public extern function LLVMGetAttributesAtIndex(LLVMValueRef arg0, int arg1, PointerPointer arg2);
// public extern function LLVMGetAttributesAtIndex(LLVMValueRef arg0, int arg1, LLVMAttributeRef arg2);
// public extern function LLVMGetEnumAttributeAtIndex(LLVMValueRef arg0, int arg1, int arg2) returns LLVMAttributeRef;
// public extern function LLVMGetStringAttributeAtIndex(LLVMValueRef arg0, int arg1, BytePointer arg2, int arg3) returns LLVMAttributeRef;
// public extern function LLVMGetStringAttributeAtIndex(LLVMValueRef arg0, int arg1, string arg2, int arg3) returns LLVMAttributeRef;
// public extern function LLVMRemoveEnumAttributeAtIndex(LLVMValueRef arg0, int arg1, int arg2);
// public extern function LLVMRemoveStringAttributeAtIndex(LLVMValueRef arg0, int arg1, BytePointer arg2, int arg3);
// public extern function LLVMRemoveStringAttributeAtIndex(LLVMValueRef arg0, int arg1, string arg2, int arg3);
// public extern function LLVMAddTargetDependentFunctionAttr(LLVMValueRef arg0, string arg1, string arg2);
// public extern function LLVMAddTargetDependentFunctionAttr(LLVMValueRef arg0, BytePointer arg1, BytePointer arg2);
// public extern function LLVMCountParams(LLVMValueRef arg0) returns int;
// public extern function LLVMGetParams(LLVMValueRef arg0, PointerPointer arg1);
// public extern function LLVMGetParams(LLVMValueRef arg0, LLVMValueRef arg1);
// public extern function LLVMGetParam(LLVMValueRef arg0, int arg1) returns LLVMValueRef;
// public extern function LLVMGetParamParent(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMGetFirstParam(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMGetLastParam(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMGetNextParam(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMGetPreviousParam(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMSetParamAlignment(LLVMValueRef arg0, int arg1);
// public extern function LLVMMDStringInContext(LLVMContextRef arg0, BytePointer arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMMDStringInContext(LLVMContextRef arg0, string arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMMDString(BytePointer arg0, int arg1) returns LLVMValueRef;
// public extern function LLVMMDString(string arg0, int arg1) returns LLVMValueRef;
// public extern function LLVMMDNodeInContext(LLVMContextRef arg0, PointerPointer arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMMDNodeInContext(LLVMContextRef arg0, LLVMValueRef arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMMDNode(LLVMValueRef arg0, int arg1) returns LLVMValueRef;
// public extern function LLVMMDNode(PointerPointer arg0, int arg1) returns LLVMValueRef;
// public extern function LLVMMetadataAsValue(LLVMContextRef arg0, LLVMMetadataRef arg1) returns LLVMValueRef;
// public extern function LLVMValueAsMetadata(LLVMValueRef arg0) returns LLVMMetadataRef;
// public extern function LLVMGetMDString(LLVMValueRef arg0, int[] arg1) returns BytePointer;
// public extern function LLVMGetMDString(LLVMValueRef arg0, IntPointer arg1) returns BytePointer;
// public extern function LLVMGetMDString(LLVMValueRef arg0, IntBuffer arg1) returns string;
// public extern function LLVMGetMDNodeNumOperands(LLVMValueRef arg0) returns int;
// public extern function LLVMGetMDNodeOperands(LLVMValueRef arg0, LLVMValueRef arg1);
// public extern function LLVMGetMDNodeOperands(LLVMValueRef arg0, PointerPointer arg1);
// public extern function LLVMBasicBlockAsValue(LLVMBasicBlockRef arg0) returns LLVMValueRef;
// public extern function LLVMValueIsBasicBlock(LLVMValueRef arg0) returns int;
// public extern function LLVMValueAsBasicBlock(LLVMValueRef arg0) returns LLVMBasicBlockRef;
// public extern function LLVMGetBasicBlockName(LLVMBasicBlockRef arg0) returns BytePointer;
// public extern function LLVMGetBasicBlockParent(LLVMBasicBlockRef arg0) returns LLVMValueRef;
// public extern function LLVMGetBasicBlockTerminator(LLVMBasicBlockRef arg0) returns LLVMValueRef;
// public extern function LLVMCountBasicBlocks(LLVMValueRef arg0) returns int;
// public extern function LLVMGetBasicBlocks(LLVMValueRef arg0, LLVMBasicBlockRef arg1);
// public extern function LLVMGetBasicBlocks(LLVMValueRef arg0, PointerPointer arg1);
// public extern function LLVMGetFirstBasicBlock(LLVMValueRef arg0) returns LLVMBasicBlockRef;
// public extern function LLVMGetLastBasicBlock(LLVMValueRef arg0) returns LLVMBasicBlockRef;
// public extern function LLVMGetNextBasicBlock(LLVMBasicBlockRef arg0) returns LLVMBasicBlockRef;
// public extern function LLVMGetPreviousBasicBlock(LLVMBasicBlockRef arg0) returns LLVMBasicBlockRef;
// public extern function LLVMGetEntryBasicBlock(LLVMValueRef arg0) returns LLVMBasicBlockRef;
// public extern function LLVMAppendBasicBlockInContext(LLVMContextRef arg0, LLVMValueRef arg1, BytePointer arg2) returns LLVMBasicBlockRef;
// public extern function LLVMAppendBasicBlockInContext(LLVMContextRef arg0, LLVMValueRef arg1, string arg2) returns LLVMBasicBlockRef;
// public extern function LLVMAppendBasicBlock(LLVMValueRef arg0, BytePointer arg1) returns LLVMBasicBlockRef;
// public extern function LLVMAppendBasicBlock(LLVMValueRef arg0, string arg1) returns LLVMBasicBlockRef;
// public extern function LLVMInsertBasicBlockInContext(LLVMContextRef arg0, LLVMBasicBlockRef arg1, BytePointer arg2) returns LLVMBasicBlockRef;
// public extern function LLVMInsertBasicBlockInContext(LLVMContextRef arg0, LLVMBasicBlockRef arg1, string arg2) returns LLVMBasicBlockRef;
// public extern function LLVMInsertBasicBlock(LLVMBasicBlockRef arg0, string arg1) returns LLVMBasicBlockRef;
// public extern function LLVMInsertBasicBlock(LLVMBasicBlockRef arg0, BytePointer arg1) returns LLVMBasicBlockRef;
// public extern function LLVMDeleteBasicBlock(LLVMBasicBlockRef arg0);
// public extern function LLVMRemoveBasicBlockFromParent(LLVMBasicBlockRef arg0);
// public extern function LLVMMoveBasicBlockBefore(LLVMBasicBlockRef arg0, LLVMBasicBlockRef arg1);
// public extern function LLVMMoveBasicBlockAfter(LLVMBasicBlockRef arg0, LLVMBasicBlockRef arg1);
// public extern function LLVMGetFirstInstruction(LLVMBasicBlockRef arg0) returns LLVMValueRef;
// public extern function LLVMGetLastInstruction(LLVMBasicBlockRef arg0) returns LLVMValueRef;
// public extern function LLVMHasMetadata(LLVMValueRef arg0) returns int;
// public extern function LLVMGetMetadata(LLVMValueRef arg0, int arg1) returns LLVMValueRef;
// public extern function LLVMSetMetadata(LLVMValueRef arg0, int arg1, LLVMValueRef arg2);
// public extern function LLVMGetInstructionParent(LLVMValueRef arg0) returns LLVMBasicBlockRef;
// public extern function LLVMGetNextInstruction(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMGetPreviousInstruction(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMInstructionRemoveFromParent(LLVMValueRef arg0);
// public extern function LLVMInstructionEraseFromParent(LLVMValueRef arg0);
// public extern function LLVMGetInstructionOpcode(LLVMValueRef arg0) returns int;
// public extern function LLVMGetICmpPredicate(LLVMValueRef arg0) returns int;
// public extern function LLVMGetFCmpPredicate(LLVMValueRef arg0) returns int;
// public extern function LLVMInstructionClone(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMGetNumArgOperands(LLVMValueRef arg0) returns int;
// public extern function LLVMSetInstructionCallConv(LLVMValueRef arg0, int arg1);
// public extern function LLVMGetInstructionCallConv(LLVMValueRef arg0) returns int;
// public extern function LLVMSetInstrParamAlignment(LLVMValueRef arg0, int arg1, int arg2);
// public extern function LLVMAddCallSiteAttribute(LLVMValueRef arg0, int arg1, LLVMAttributeRef arg2);
// public extern function LLVMGetCallSiteAttributeCount(LLVMValueRef arg0, int arg1) returns int;
// public extern function LLVMGetCallSiteAttributes(LLVMValueRef arg0, int arg1, PointerPointer arg2);
// public extern function LLVMGetCallSiteAttributes(LLVMValueRef arg0, int arg1, LLVMAttributeRef arg2);
// public extern function LLVMGetCallSiteEnumAttribute(LLVMValueRef arg0, int arg1, int arg2) returns LLVMAttributeRef;
// public extern function LLVMGetCallSiteStringAttribute(LLVMValueRef arg0, int arg1, string arg2, int arg3) returns LLVMAttributeRef;
// public extern function LLVMGetCallSiteStringAttribute(LLVMValueRef arg0, int arg1, BytePointer arg2, int arg3) returns LLVMAttributeRef;
// public extern function LLVMRemoveCallSiteEnumAttribute(LLVMValueRef arg0, int arg1, int arg2);
// public extern function LLVMRemoveCallSiteStringAttribute(LLVMValueRef arg0, int arg1, BytePointer arg2, int arg3);
// public extern function LLVMRemoveCallSiteStringAttribute(LLVMValueRef arg0, int arg1, string arg2, int arg3);
// public extern function LLVMGetCalledValue(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMIsTailCall(LLVMValueRef arg0) returns int;
// public extern function LLVMSetTailCall(LLVMValueRef arg0, int arg1);
// public extern function LLVMGetNormalDest(LLVMValueRef arg0) returns LLVMBasicBlockRef;
// public extern function LLVMGetUnwindDest(LLVMValueRef arg0) returns LLVMBasicBlockRef;
// public extern function LLVMSetNormalDest(LLVMValueRef arg0, LLVMBasicBlockRef arg1);
// public extern function LLVMSetUnwindDest(LLVMValueRef arg0, LLVMBasicBlockRef arg1);
// public extern function LLVMGetNumSuccessors(LLVMValueRef arg0) returns int;
// public extern function LLVMGetSuccessor(LLVMValueRef arg0, int arg1) returns LLVMBasicBlockRef;
// public extern function LLVMSetSuccessor(LLVMValueRef arg0, int arg1, LLVMBasicBlockRef arg2);
// public extern function LLVMIsConditional(LLVMValueRef arg0) returns int;
// public extern function LLVMGetCondition(LLVMValueRef arg0) returns LLVMValueRef;
// public extern function LLVMSetCondition(LLVMValueRef arg0, LLVMValueRef arg1);
// public extern function LLVMGetSwitchDefaultDest(LLVMValueRef arg0) returns LLVMBasicBlockRef;
// public extern function LLVMGetAllocatedType(LLVMValueRef arg0) returns LLVMTypeRef;
// public extern function LLVMIsInBounds(LLVMValueRef arg0) returns int;
// public extern function LLVMSetIsInBounds(LLVMValueRef arg0, int arg1);
// public extern function LLVMAddIncoming(LLVMValueRef arg0, LLVMValueRef arg1, LLVMBasicBlockRef arg2, int arg3);
// public extern function LLVMAddIncoming(LLVMValueRef arg0, PointerPointer arg1, PointerPointer arg2, int arg3);
// public extern function LLVMCountIncoming(LLVMValueRef arg0) returns int;
// public extern function LLVMGetIncomingValue(LLVMValueRef arg0, int arg1) returns LLVMValueRef;
// public extern function LLVMGetIncomingBlock(LLVMValueRef arg0, int arg1) returns LLVMBasicBlockRef;
// public extern function LLVMGetNumIndices(LLVMValueRef arg0) returns int;
// public extern function LLVMGetIndices(LLVMValueRef arg0) returns IntPointer;
// public extern function LLVMCreateBuilderInContext(LLVMContextRef arg0) returns LLVMBuilderRef;
// public extern function LLVMCreateBuilder() returns LLVMBuilderRef;
// public extern function LLVMPositionBuilder(LLVMBuilderRef arg0, LLVMBasicBlockRef arg1, LLVMValueRef arg2);
// public extern function LLVMPositionBuilderBefore(LLVMBuilderRef arg0, LLVMValueRef arg1);
// public extern function LLVMPositionBuilderAtEnd(LLVMBuilderRef arg0, LLVMBasicBlockRef arg1);
// public extern function LLVMGetInsertBlock(LLVMBuilderRef arg0) returns LLVMBasicBlockRef;
// public extern function LLVMClearInsertionPosition(LLVMBuilderRef arg0);
// public extern function LLVMInsertIntoBuilder(LLVMBuilderRef arg0, LLVMValueRef arg1);
// public extern function LLVMInsertIntoBuilderWithName(LLVMBuilderRef arg0, LLVMValueRef arg1, string arg2);
// public extern function LLVMInsertIntoBuilderWithName(LLVMBuilderRef arg0, LLVMValueRef arg1, BytePointer arg2);
// public extern function LLVMDisposeBuilder(LLVMBuilderRef arg0);
// public extern function LLVMSetCurrentDebugLocation(LLVMBuilderRef arg0, LLVMValueRef arg1);
// public extern function LLVMGetCurrentDebugLocation(LLVMBuilderRef arg0) returns LLVMValueRef;
// public extern function LLVMSetInstDebugLocation(LLVMBuilderRef arg0, LLVMValueRef arg1);
// public extern function LLVMBuildRetVoid(LLVMBuilderRef arg0) returns LLVMValueRef;
// public extern function LLVMBuildRet(LLVMBuilderRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMBuildAggregateRet(LLVMBuilderRef arg0, PointerPointer arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMBuildAggregateRet(LLVMBuilderRef arg0, LLVMValueRef arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMBuildBr(LLVMBuilderRef arg0, LLVMBasicBlockRef arg1) returns LLVMValueRef;
// public extern function LLVMBuildCondBr(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMBasicBlockRef arg2, LLVMBasicBlockRef arg3) returns LLVMValueRef;
// public extern function LLVMBuildSwitch(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMBasicBlockRef arg2, int arg3) returns LLVMValueRef;
// public extern function LLVMBuildIndirectBr(LLVMBuilderRef arg0, LLVMValueRef arg1, int arg2) returns LLVMValueRef;
// public extern function LLVMBuildInvoke(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, int arg3, LLVMBasicBlockRef arg4, LLVMBasicBlockRef arg5, BytePointer arg6) returns LLVMValueRef;
// public extern function LLVMBuildInvoke(LLVMBuilderRef arg0, LLVMValueRef arg1, PointerPointer arg2, int arg3, LLVMBasicBlockRef arg4, LLVMBasicBlockRef arg5, string arg6) returns LLVMValueRef;
// public extern function LLVMBuildLandingPad(LLVMBuilderRef arg0, LLVMTypeRef arg1, LLVMValueRef arg2, int arg3, string arg4) returns LLVMValueRef;
// public extern function LLVMBuildLandingPad(LLVMBuilderRef arg0, LLVMTypeRef arg1, LLVMValueRef arg2, int arg3, BytePointer arg4) returns LLVMValueRef;
// public extern function LLVMBuildResume(LLVMBuilderRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMBuildUnreachable(LLVMBuilderRef arg0) returns LLVMValueRef;
// public extern function LLVMAddCase(LLVMValueRef arg0, LLVMValueRef arg1, LLVMBasicBlockRef arg2);
// public extern function LLVMAddDestination(LLVMValueRef arg0, LLVMBasicBlockRef arg1);
// public extern function LLVMGetNumClauses(LLVMValueRef arg0) returns int;
// public extern function LLVMGetClause(LLVMValueRef arg0, int arg1) returns LLVMValueRef;
// public extern function LLVMAddClause(LLVMValueRef arg0, LLVMValueRef arg1);
// public extern function LLVMIsCleanup(LLVMValueRef arg0) returns int;
// public extern function LLVMSetCleanup(LLVMValueRef arg0, int arg1);
// public extern function LLVMBuildAdd(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildAdd(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildNSWAdd(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildNSWAdd(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildNUWAdd(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildNUWAdd(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildFAdd(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildFAdd(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildSub(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildSub(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildNSWSub(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildNSWSub(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildNUWSub(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildNUWSub(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildFSub(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildFSub(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildMul(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildMul(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildNSWMul(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildNSWMul(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildNUWMul(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildNUWMul(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildFMul(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildFMul(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildUDiv(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildUDiv(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildExactUDiv(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildExactUDiv(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildSDiv(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildSDiv(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildExactSDiv(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildExactSDiv(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildFDiv(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildFDiv(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildURem(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildURem(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildSRem(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildSRem(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildFRem(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildFRem(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildShl(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildShl(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildLShr(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildLShr(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildAShr(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildAShr(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildAnd(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildAnd(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildOr(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildOr(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildXor(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildXor(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildBinOp(LLVMBuilderRef arg0, int arg1, LLVMValueRef arg2, LLVMValueRef arg3, string arg4) returns LLVMValueRef;
// public extern function LLVMBuildBinOp(LLVMBuilderRef arg0, int arg1, LLVMValueRef arg2, LLVMValueRef arg3, BytePointer arg4) returns LLVMValueRef;
// public extern function LLVMBuildNeg(LLVMBuilderRef arg0, LLVMValueRef arg1, BytePointer arg2) returns LLVMValueRef;
// public extern function LLVMBuildNeg(LLVMBuilderRef arg0, LLVMValueRef arg1, string arg2) returns LLVMValueRef;
// public extern function LLVMBuildNSWNeg(LLVMBuilderRef arg0, LLVMValueRef arg1, BytePointer arg2) returns LLVMValueRef;
// public extern function LLVMBuildNSWNeg(LLVMBuilderRef arg0, LLVMValueRef arg1, string arg2) returns LLVMValueRef;
// public extern function LLVMBuildNUWNeg(LLVMBuilderRef arg0, LLVMValueRef arg1, BytePointer arg2) returns LLVMValueRef;
// public extern function LLVMBuildNUWNeg(LLVMBuilderRef arg0, LLVMValueRef arg1, string arg2) returns LLVMValueRef;
// public extern function LLVMBuildFNeg(LLVMBuilderRef arg0, LLVMValueRef arg1, BytePointer arg2) returns LLVMValueRef;
// public extern function LLVMBuildFNeg(LLVMBuilderRef arg0, LLVMValueRef arg1, string arg2) returns LLVMValueRef;
// public extern function LLVMBuildNot(LLVMBuilderRef arg0, LLVMValueRef arg1, string arg2) returns LLVMValueRef;
// public extern function LLVMBuildNot(LLVMBuilderRef arg0, LLVMValueRef arg1, BytePointer arg2) returns LLVMValueRef;
// public extern function LLVMBuildMalloc(LLVMBuilderRef arg0, LLVMTypeRef arg1, BytePointer arg2) returns LLVMValueRef;
// public extern function LLVMBuildMalloc(LLVMBuilderRef arg0, LLVMTypeRef arg1, string arg2) returns LLVMValueRef;
// public extern function LLVMBuildArrayMalloc(LLVMBuilderRef arg0, LLVMTypeRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildArrayMalloc(LLVMBuilderRef arg0, LLVMTypeRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildAlloca(LLVMBuilderRef arg0, LLVMTypeRef arg1, BytePointer arg2) returns LLVMValueRef;
// public extern function LLVMBuildAlloca(LLVMBuilderRef arg0, LLVMTypeRef arg1, string arg2) returns LLVMValueRef;
// public extern function LLVMBuildArrayAlloca(LLVMBuilderRef arg0, LLVMTypeRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildArrayAlloca(LLVMBuilderRef arg0, LLVMTypeRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildFree(LLVMBuilderRef arg0, LLVMValueRef arg1) returns LLVMValueRef;
// public extern function LLVMBuildLoad(LLVMBuilderRef arg0, LLVMValueRef arg1, BytePointer arg2) returns LLVMValueRef;
// public extern function LLVMBuildLoad(LLVMBuilderRef arg0, LLVMValueRef arg1, string arg2) returns LLVMValueRef;
// public extern function LLVMBuildStore(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2) returns LLVMValueRef;
// public extern function LLVMBuildGEP(LLVMBuilderRef arg0, LLVMValueRef arg1, PointerPointer arg2, int arg3, string arg4) returns LLVMValueRef;
// public extern function LLVMBuildGEP(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, int arg3, BytePointer arg4) returns LLVMValueRef;
// public extern function LLVMBuildInBoundsGEP(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, int arg3, BytePointer arg4) returns LLVMValueRef;
// public extern function LLVMBuildInBoundsGEP(LLVMBuilderRef arg0, LLVMValueRef arg1, PointerPointer arg2, int arg3, string arg4) returns LLVMValueRef;
// public extern function LLVMBuildStructGEP(LLVMBuilderRef arg0, LLVMValueRef arg1, int arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildStructGEP(LLVMBuilderRef arg0, LLVMValueRef arg1, int arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildGlobalString(LLVMBuilderRef arg0, BytePointer arg1, BytePointer arg2) returns LLVMValueRef;
// public extern function LLVMBuildGlobalString(LLVMBuilderRef arg0, string arg1, string arg2) returns LLVMValueRef;
// public extern function LLVMBuildGlobalStringPtr(LLVMBuilderRef arg0, BytePointer arg1, BytePointer arg2) returns LLVMValueRef;
// public extern function LLVMBuildGlobalStringPtr(LLVMBuilderRef arg0, string arg1, string arg2) returns LLVMValueRef;
// public extern function LLVMGetVolatile(LLVMValueRef arg0) returns int;
// public extern function LLVMSetVolatile(LLVMValueRef arg0, int arg1);
// public extern function LLVMGetOrdering(LLVMValueRef arg0) returns int;
// public extern function LLVMSetOrdering(LLVMValueRef arg0, int arg1);
// public extern function LLVMBuildTrunc(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildTrunc(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildZExt(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildZExt(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildSExt(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildSExt(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildFPToUI(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildFPToUI(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildFPToSI(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildFPToSI(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildUIToFP(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildUIToFP(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildSIToFP(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildSIToFP(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildFPTrunc(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildFPTrunc(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildFPExt(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildFPExt(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildPtrToInt(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildPtrToInt(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildIntToPtr(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildIntToPtr(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildBitCast(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildBitCast(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildAddrSpaceCast(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildAddrSpaceCast(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildZExtOrBitCast(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildZExtOrBitCast(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildSExtOrBitCast(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildSExtOrBitCast(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildTruncOrBitCast(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildTruncOrBitCast(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildCast(LLVMBuilderRef arg0, int arg1, LLVMValueRef arg2, LLVMTypeRef arg3, BytePointer arg4) returns LLVMValueRef;
// public extern function LLVMBuildCast(LLVMBuilderRef arg0, int arg1, LLVMValueRef arg2, LLVMTypeRef arg3, string arg4) returns LLVMValueRef;
// public extern function LLVMBuildPointerCast(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildPointerCast(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildIntCast(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildIntCast(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildFPCast(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildFPCast(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildICmp(LLVMBuilderRef arg0, int arg1, LLVMValueRef arg2, LLVMValueRef arg3, BytePointer arg4) returns LLVMValueRef;
// public extern function LLVMBuildICmp(LLVMBuilderRef arg0, int arg1, LLVMValueRef arg2, LLVMValueRef arg3, string arg4) returns LLVMValueRef;
// public extern function LLVMBuildFCmp(LLVMBuilderRef arg0, int arg1, LLVMValueRef arg2, LLVMValueRef arg3, string arg4) returns LLVMValueRef;
// public extern function LLVMBuildFCmp(LLVMBuilderRef arg0, int arg1, LLVMValueRef arg2, LLVMValueRef arg3, BytePointer arg4) returns LLVMValueRef;
// public extern function LLVMBuildPhi(LLVMBuilderRef arg0, LLVMTypeRef arg1, string arg2) returns LLVMValueRef;
// public extern function LLVMBuildPhi(LLVMBuilderRef arg0, LLVMTypeRef arg1, BytePointer arg2) returns LLVMValueRef;
// public extern function LLVMBuildCall(LLVMBuilderRef arg0, LLVMValueRef arg1, PointerPointer arg2, int arg3, string arg4) returns LLVMValueRef;
// public extern function LLVMBuildCall(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, int arg3, BytePointer arg4) returns LLVMValueRef;
// public extern function LLVMBuildSelect(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, LLVMValueRef arg3, BytePointer arg4) returns LLVMValueRef;
// public extern function LLVMBuildSelect(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, LLVMValueRef arg3, string arg4) returns LLVMValueRef;
// public extern function LLVMBuildVAArg(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildVAArg(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMTypeRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildExtractElement(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildExtractElement(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildInsertElement(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, LLVMValueRef arg3, string arg4) returns LLVMValueRef;
// public extern function LLVMBuildInsertElement(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, LLVMValueRef arg3, BytePointer arg4) returns LLVMValueRef;
// public extern function LLVMBuildShuffleVector(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, LLVMValueRef arg3, string arg4) returns LLVMValueRef;
// public extern function LLVMBuildShuffleVector(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, LLVMValueRef arg3, BytePointer arg4) returns LLVMValueRef;
// public extern function LLVMBuildExtractValue(LLVMBuilderRef arg0, LLVMValueRef arg1, int arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildExtractValue(LLVMBuilderRef arg0, LLVMValueRef arg1, int arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildInsertValue(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, int arg3, string arg4) returns LLVMValueRef;
// public extern function LLVMBuildInsertValue(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, int arg3, BytePointer arg4) returns LLVMValueRef;
// public extern function LLVMBuildIsNull(LLVMBuilderRef arg0, LLVMValueRef arg1, string arg2) returns LLVMValueRef;
// public extern function LLVMBuildIsNull(LLVMBuilderRef arg0, LLVMValueRef arg1, BytePointer arg2) returns LLVMValueRef;
// public extern function LLVMBuildIsNotNull(LLVMBuilderRef arg0, LLVMValueRef arg1, BytePointer arg2) returns LLVMValueRef;
// public extern function LLVMBuildIsNotNull(LLVMBuilderRef arg0, LLVMValueRef arg1, string arg2) returns LLVMValueRef;
// public extern function LLVMBuildPtrDiff(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildPtrDiff(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildFence(LLVMBuilderRef arg0, int arg1, int arg2, string arg3) returns LLVMValueRef;
// public extern function LLVMBuildFence(LLVMBuilderRef arg0, int arg1, int arg2, BytePointer arg3) returns LLVMValueRef;
// public extern function LLVMBuildAtomicRMW(LLVMBuilderRef arg0, int arg1, LLVMValueRef arg2, LLVMValueRef arg3, int arg4, int arg5) returns LLVMValueRef;
// public extern function LLVMBuildAtomicCmpXchg(LLVMBuilderRef arg0, LLVMValueRef arg1, LLVMValueRef arg2, LLVMValueRef arg3, int arg4, int arg5, int arg6) returns LLVMValueRef;
// public extern function LLVMIsAtomicSingleThread(LLVMValueRef arg0) returns int;
// public extern function LLVMSetAtomicSingleThread(LLVMValueRef arg0, int arg1);
// public extern function LLVMGetCmpXchgSuccessOrdering(LLVMValueRef arg0) returns int;
// public extern function LLVMSetCmpXchgSuccessOrdering(LLVMValueRef arg0, int arg1);
// public extern function LLVMGetCmpXchgFailureOrdering(LLVMValueRef arg0) returns int;
// public extern function LLVMSetCmpXchgFailureOrdering(LLVMValueRef arg0, int arg1);
// public extern function LLVMCreateModuleProviderForExistingModule(LLVMModuleRef arg0) returns LLVMModuleProviderRef;
// public extern function LLVMDisposeModuleProvider(LLVMModuleProviderRef arg0);
// public extern function LLVMCreateMemoryBufferWithContentsOfFile(string arg0, PointerPointer arg1, ByteBuffer arg2) returns int;
// public extern function LLVMCreateMemoryBufferWithContentsOfFile(BytePointer arg0, LLVMMemoryBufferRef arg1, byte[] arg2) returns int;
// public extern function LLVMCreateMemoryBufferWithContentsOfFile(string arg0, PointerPointer arg1, BytePointer arg2) returns int;
// public extern function LLVMCreateMemoryBufferWithContentsOfFile(BytePointer arg0, LLVMMemoryBufferRef arg1, ByteBuffer arg2) returns int;
// public extern function LLVMCreateMemoryBufferWithContentsOfFile(string arg0, PointerPointer arg1, byte[] arg2) returns int;
// public extern function LLVMCreateMemoryBufferWithContentsOfFile(BytePointer arg0, LLVMMemoryBufferRef arg1, PointerPointer arg2) returns int;
// public extern function LLVMCreateMemoryBufferWithContentsOfFile(BytePointer arg0, LLVMMemoryBufferRef arg1, BytePointer arg2) returns int;
// public extern function LLVMCreateMemoryBufferWithSTDIN(LLVMMemoryBufferRef arg0, byte[] arg1) returns int;
// public extern function LLVMCreateMemoryBufferWithSTDIN(PointerPointer arg0, BytePointer arg1) returns int;
// public extern function LLVMCreateMemoryBufferWithSTDIN(LLVMMemoryBufferRef arg0, ByteBuffer arg1) returns int;
// public extern function LLVMCreateMemoryBufferWithSTDIN(PointerPointer arg0, byte[] arg1) returns int;
// public extern function LLVMCreateMemoryBufferWithSTDIN(LLVMMemoryBufferRef arg0, PointerPointer arg1) returns int;
// public extern function LLVMCreateMemoryBufferWithSTDIN(LLVMMemoryBufferRef arg0, BytePointer arg1) returns int;
// public extern function LLVMCreateMemoryBufferWithSTDIN(PointerPointer arg0, ByteBuffer arg1) returns int;
// public extern function LLVMCreateMemoryBufferWithMemoryRange(BytePointer arg0, long arg1, BytePointer arg2, int arg3) returns LLVMMemoryBufferRef;
// public extern function LLVMCreateMemoryBufferWithMemoryRange(string arg0, long arg1, string arg2, int arg3) returns LLVMMemoryBufferRef;
// public extern function LLVMCreateMemoryBufferWithMemoryRangeCopy(string arg0, long arg1, string arg2) returns LLVMMemoryBufferRef;
// public extern function LLVMCreateMemoryBufferWithMemoryRangeCopy(BytePointer arg0, long arg1, BytePointer arg2) returns LLVMMemoryBufferRef;
// public extern function LLVMGetBufferStart(LLVMMemoryBufferRef arg0) returns BytePointer;
// public extern function LLVMGetBufferSize(LLVMMemoryBufferRef arg0) returns long;
// public extern function LLVMDisposeMemoryBuffer(LLVMMemoryBufferRef arg0);
// public extern function LLVMGetGlobalPassRegistry() returns LLVMPassRegistryRef;
// public extern function LLVMCreatePassManager() returns LLVMPassManagerRef;
// public extern function LLVMCreateFunctionPassManagerForModule(LLVMModuleRef arg0) returns LLVMPassManagerRef;
// public extern function LLVMCreateFunctionPassManager(LLVMModuleProviderRef arg0) returns LLVMPassManagerRef;
// public extern function LLVMRunPassManager(LLVMPassManagerRef arg0, LLVMModuleRef arg1) returns int;
// public extern function LLVMInitializeFunctionPassManager(LLVMPassManagerRef arg0) returns int;
// public extern function LLVMRunFunctionPassManager(LLVMPassManagerRef arg0, LLVMValueRef arg1) returns int;
// public extern function LLVMFinalizeFunctionPassManager(LLVMPassManagerRef arg0) returns int;
// public extern function LLVMDisposePassManager(LLVMPassManagerRef arg0);
// public extern function LLVMStartMultithreaded() returns int;
// public extern function LLVMStopMultithreaded();
// public extern function LLVMIsMultithreaded() returns int;
// public extern function LLVMVerifyModule(LLVMModuleRef arg0, int arg1, ByteBuffer arg2) returns int;
// public extern function LLVMVerifyModule(LLVMModuleRef arg0, int arg1, byte[] arg2) returns int;
// public extern function LLVMVerifyModule(LLVMModuleRef arg0, int arg1, BytePointer arg2) returns int;
// public extern function LLVMVerifyModule(LLVMModuleRef arg0, int arg1, PointerPointer arg2) returns int;
// public extern function LLVMVerifyFunction(LLVMValueRef arg0, int arg1) returns int;
// public extern function LLVMViewFunctionCFG(LLVMValueRef arg0);
// public extern function LLVMViewFunctionCFGOnly(LLVMValueRef arg0);
// public extern function LLVMParseBitcode(LLVMMemoryBufferRef arg0, PointerPointer arg1, ByteBuffer arg2) returns int;
// public extern function LLVMParseBitcode(LLVMMemoryBufferRef arg0, PointerPointer arg1, BytePointer arg2) returns int;
// public extern function LLVMParseBitcode(LLVMMemoryBufferRef arg0, LLVMModuleRef arg1, ByteBuffer arg2) returns int;
// public extern function LLVMParseBitcode(LLVMMemoryBufferRef arg0, PointerPointer arg1, byte[] arg2) returns int;
// public extern function LLVMParseBitcode(LLVMMemoryBufferRef arg0, LLVMModuleRef arg1, PointerPointer arg2) returns int;
// public extern function LLVMParseBitcode(LLVMMemoryBufferRef arg0, LLVMModuleRef arg1, BytePointer arg2) returns int;
// public extern function LLVMParseBitcode(LLVMMemoryBufferRef arg0, LLVMModuleRef arg1, byte[] arg2) returns int;
// public extern function LLVMParseBitcode2(LLVMMemoryBufferRef arg0, LLVMModuleRef arg1) returns int;
// public extern function LLVMParseBitcode2(LLVMMemoryBufferRef arg0, PointerPointer arg1) returns int;
// public extern function LLVMParseBitcodeInContext(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, PointerPointer arg2, BytePointer arg3) returns int;
// public extern function LLVMParseBitcodeInContext(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, LLVMModuleRef arg2, byte[] arg3) returns int;
// public extern function LLVMParseBitcodeInContext(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, LLVMModuleRef arg2, ByteBuffer arg3) returns int;
// public extern function LLVMParseBitcodeInContext(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, PointerPointer arg2, byte[] arg3) returns int;
// public extern function LLVMParseBitcodeInContext(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, LLVMModuleRef arg2, PointerPointer arg3) returns int;
// public extern function LLVMParseBitcodeInContext(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, LLVMModuleRef arg2, BytePointer arg3) returns int;
// public extern function LLVMParseBitcodeInContext(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, PointerPointer arg2, ByteBuffer arg3) returns int;
// public extern function LLVMParseBitcodeInContext2(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, PointerPointer arg2) returns int;
// public extern function LLVMParseBitcodeInContext2(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, LLVMModuleRef arg2) returns int;
// public extern function LLVMGetBitcodeModuleInContext(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, LLVMModuleRef arg2, byte[] arg3) returns int;
// public extern function LLVMGetBitcodeModuleInContext(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, PointerPointer arg2, BytePointer arg3) returns int;
// public extern function LLVMGetBitcodeModuleInContext(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, LLVMModuleRef arg2, ByteBuffer arg3) returns int;
// public extern function LLVMGetBitcodeModuleInContext(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, PointerPointer arg2, byte[] arg3) returns int;
// public extern function LLVMGetBitcodeModuleInContext(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, LLVMModuleRef arg2, BytePointer arg3) returns int;
// public extern function LLVMGetBitcodeModuleInContext(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, LLVMModuleRef arg2, PointerPointer arg3) returns int;
// public extern function LLVMGetBitcodeModuleInContext(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, PointerPointer arg2, ByteBuffer arg3) returns int;
// public extern function LLVMGetBitcodeModuleInContext2(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, LLVMModuleRef arg2) returns int;
// public extern function LLVMGetBitcodeModuleInContext2(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, PointerPointer arg2) returns int;
// public extern function LLVMGetBitcodeModule(LLVMMemoryBufferRef arg0, LLVMModuleRef arg1, byte[] arg2) returns int;
// public extern function LLVMGetBitcodeModule(LLVMMemoryBufferRef arg0, PointerPointer arg1, ByteBuffer arg2) returns int;
// public extern function LLVMGetBitcodeModule(LLVMMemoryBufferRef arg0, PointerPointer arg1, BytePointer arg2) returns int;
// public extern function LLVMGetBitcodeModule(LLVMMemoryBufferRef arg0, PointerPointer arg1, byte[] arg2) returns int;
// public extern function LLVMGetBitcodeModule(LLVMMemoryBufferRef arg0, LLVMModuleRef arg1, ByteBuffer arg2) returns int;
// public extern function LLVMGetBitcodeModule(LLVMMemoryBufferRef arg0, LLVMModuleRef arg1, PointerPointer arg2) returns int;
// public extern function LLVMGetBitcodeModule(LLVMMemoryBufferRef arg0, LLVMModuleRef arg1, BytePointer arg2) returns int;
// public extern function LLVMGetBitcodeModule2(LLVMMemoryBufferRef arg0, LLVMModuleRef arg1) returns int;
// public extern function LLVMGetBitcodeModule2(LLVMMemoryBufferRef arg0, PointerPointer arg1) returns int;
public extern function LLVMWriteBitcodeToFile(LLVMModuleRef arg0, string arg1) returns int;
// public extern function LLVMWriteBitcodeToFile(LLVMModuleRef arg0, BytePointer arg1) returns int;
// public extern function LLVMWriteBitcodeToFD(LLVMModuleRef arg0, int arg1, int arg2, int arg3) returns int;
// public extern function LLVMWriteBitcodeToFileHandle(LLVMModuleRef arg0, int arg1) returns int;
// public extern function LLVMWriteBitcodeToMemoryBuffer(LLVMModuleRef arg0) returns LLVMMemoryBufferRef;
// public extern function LLVMCreateDisasm(BytePointer arg0, Pointer arg1, int arg2, LLVMOpInfoCallback arg3, LLVMSymbolLookupCallback arg4) returns LLVMDisasmContextRef;
// public extern function LLVMCreateDisasm(string arg0, Pointer arg1, int arg2, LLVMOpInfoCallback arg3, LLVMSymbolLookupCallback arg4) returns LLVMDisasmContextRef;
// public extern function LLVMCreateDisasmCPU(string arg0, string arg1, Pointer arg2, int arg3, LLVMOpInfoCallback arg4, LLVMSymbolLookupCallback arg5) returns LLVMDisasmContextRef;
// public extern function LLVMCreateDisasmCPU(BytePointer arg0, BytePointer arg1, Pointer arg2, int arg3, LLVMOpInfoCallback arg4, LLVMSymbolLookupCallback arg5) returns LLVMDisasmContextRef;
// public extern function LLVMCreateDisasmCPUFeatures(string arg0, string arg1, string arg2, Pointer arg3, int arg4, LLVMOpInfoCallback arg5, LLVMSymbolLookupCallback arg6) returns LLVMDisasmContextRef;
// public extern function LLVMCreateDisasmCPUFeatures(BytePointer arg0, BytePointer arg1, BytePointer arg2, Pointer arg3, int arg4, LLVMOpInfoCallback arg5, LLVMSymbolLookupCallback arg6) returns LLVMDisasmContextRef;
// public extern function LLVMSetDisasmOptions(LLVMDisasmContextRef arg0, long arg1) returns int;
// public extern function LLVMDisasmDispose(LLVMDisasmContextRef arg0);
// public extern function LLVMDisasmInstruction(LLVMDisasmContextRef arg0, ByteBuffer arg1, long arg2, long arg3, ByteBuffer arg4, long arg5) returns long;
// public extern function LLVMDisasmInstruction(LLVMDisasmContextRef arg0, BytePointer arg1, long arg2, long arg3, BytePointer arg4, long arg5) returns long;
// public extern function LLVMDisasmInstruction(LLVMDisasmContextRef arg0, byte[] arg1, long arg2, long arg3, byte[] arg4, long arg5) returns long;
// public extern function LLVMInitializeTransformUtils(LLVMPassRegistryRef arg0);
// public extern function LLVMInitializeScalarOpts(LLVMPassRegistryRef arg0);
// public extern function LLVMInitializeObjCARCOpts(LLVMPassRegistryRef arg0);
// public extern function LLVMInitializeVectorization(LLVMPassRegistryRef arg0);
// public extern function LLVMInitializeInstCombine(LLVMPassRegistryRef arg0);
// public extern function LLVMInitializeIPO(LLVMPassRegistryRef arg0);
// public extern function LLVMInitializeInstrumentation(LLVMPassRegistryRef arg0);
// public extern function LLVMInitializeAnalysis(LLVMPassRegistryRef arg0);
// public extern function LLVMInitializeIPA(LLVMPassRegistryRef arg0);
// public extern function LLVMInitializeCodeGen(LLVMPassRegistryRef arg0);
// public extern function LLVMInitializeTarget(LLVMPassRegistryRef arg0);
// public extern function LLVMParseIRInContext(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, PointerPointer arg2, BytePointer arg3) returns int;
// public extern function LLVMParseIRInContext(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, LLVMModuleRef arg2, byte[] arg3) returns int;
// public extern function LLVMParseIRInContext(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, LLVMModuleRef arg2, ByteBuffer arg3) returns int;
// public extern function LLVMParseIRInContext(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, PointerPointer arg2, byte[] arg3) returns int;
// public extern function LLVMParseIRInContext(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, LLVMModuleRef arg2, PointerPointer arg3) returns int;
// public extern function LLVMParseIRInContext(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, LLVMModuleRef arg2, BytePointer arg3) returns int;
// public extern function LLVMParseIRInContext(LLVMContextRef arg0, LLVMMemoryBufferRef arg1, PointerPointer arg2, ByteBuffer arg3) returns int;
// public extern function LLVMLinkModules2(LLVMModuleRef arg0, LLVMModuleRef arg1) returns int;
// public extern function lto_get_version() returns BytePointer;
// public extern function lto_get_error_message() returns BytePointer;
// public extern function lto_module_is_object_file(string arg0) returns boolean;
// public extern function lto_module_is_object_file(BytePointer arg0) returns boolean;
// public extern function lto_module_is_object_file_for_target(BytePointer arg0, BytePointer arg1) returns boolean;
// public extern function lto_module_is_object_file_for_target(string arg0, string arg1) returns boolean;
// public extern function lto_module_has_objc_category(Pointer arg0, long arg1) returns boolean;
// public extern function lto_module_is_object_file_in_memory(Pointer arg0, long arg1) returns boolean;
// public extern function lto_module_is_object_file_in_memory_for_target(Pointer arg0, long arg1, BytePointer arg2) returns boolean;
// public extern function lto_module_is_object_file_in_memory_for_target(Pointer arg0, long arg1, string arg2) returns boolean;
// public extern function lto_module_create(string arg0) returns lto_module_t;
// public extern function lto_module_create(BytePointer arg0) returns lto_module_t;
// public extern function lto_module_create_from_memory(Pointer arg0, long arg1) returns lto_module_t;
// public extern function lto_module_create_from_memory_with_path(Pointer arg0, long arg1, BytePointer arg2) returns lto_module_t;
// public extern function lto_module_create_from_memory_with_path(Pointer arg0, long arg1, string arg2) returns lto_module_t;
// public extern function lto_module_create_in_local_context(Pointer arg0, long arg1, string arg2) returns lto_module_t;
// public extern function lto_module_create_in_local_context(Pointer arg0, long arg1, BytePointer arg2) returns lto_module_t;
// public extern function lto_module_create_in_codegen_context(Pointer arg0, long arg1, BytePointer arg2, lto_code_gen_t arg3) returns lto_module_t;
// public extern function lto_module_create_in_codegen_context(Pointer arg0, long arg1, string arg2, lto_code_gen_t arg3) returns lto_module_t;
// public extern function lto_module_create_from_fd(int arg0, string arg1, long arg2) returns lto_module_t;
// public extern function lto_module_create_from_fd(int arg0, BytePointer arg1, long arg2) returns lto_module_t;
// public extern function lto_module_create_from_fd_at_offset(int arg0, string arg1, long arg2, long arg3, long arg4) returns lto_module_t;
// public extern function lto_module_create_from_fd_at_offset(int arg0, BytePointer arg1, long arg2, long arg3, long arg4) returns lto_module_t;
// public extern function lto_module_dispose(lto_module_t arg0);
// public extern function lto_module_get_target_triple(lto_module_t arg0) returns BytePointer;
// public extern function lto_module_set_target_triple(lto_module_t arg0, string arg1);
// public extern function lto_module_set_target_triple(lto_module_t arg0, BytePointer arg1);
// public extern function lto_module_get_num_symbols(lto_module_t arg0) returns int;
// public extern function lto_module_get_symbol_name(lto_module_t arg0, int arg1) returns BytePointer;
// public extern function lto_module_get_symbol_attribute(lto_module_t arg0, int arg1) returns int;
// public extern function lto_module_get_linkeropts(lto_module_t arg0) returns BytePointer;
// public extern function lto_codegen_set_diagnostic_handler(lto_code_gen_t arg0, lto_diagnostic_handler_t arg1, Pointer arg2);
// public extern function lto_codegen_create() returns lto_code_gen_t;
// public extern function lto_codegen_create_in_local_context() returns lto_code_gen_t;
// public extern function lto_codegen_dispose(lto_code_gen_t arg0);
// public extern function lto_codegen_add_module(lto_code_gen_t arg0, lto_module_t arg1) returns boolean;
// public extern function lto_codegen_set_module(lto_code_gen_t arg0, lto_module_t arg1);
// public extern function lto_codegen_set_debug_model(lto_code_gen_t arg0, int arg1) returns boolean;
// public extern function lto_codegen_set_pic_model(lto_code_gen_t arg0, int arg1) returns boolean;
// public extern function lto_codegen_set_cpu(lto_code_gen_t arg0, BytePointer arg1);
// public extern function lto_codegen_set_cpu(lto_code_gen_t arg0, string arg1);
// public extern function lto_codegen_set_assembler_path(lto_code_gen_t arg0, string arg1);
// public extern function lto_codegen_set_assembler_path(lto_code_gen_t arg0, BytePointer arg1);
// public extern function lto_codegen_set_assembler_args(lto_code_gen_t arg0, ByteBuffer arg1, int arg2);
// public extern function lto_codegen_set_assembler_args(lto_code_gen_t arg0, byte[] arg1, int arg2);
// public extern function lto_codegen_set_assembler_args(lto_code_gen_t arg0, BytePointer arg1, int arg2);
// public extern function lto_codegen_set_assembler_args(lto_code_gen_t arg0, PointerPointer arg1, int arg2);
// public extern function lto_codegen_add_must_preserve_symbol(lto_code_gen_t arg0, string arg1);
// public extern function lto_codegen_add_must_preserve_symbol(lto_code_gen_t arg0, BytePointer arg1);
// public extern function lto_codegen_write_merged_modules(lto_code_gen_t arg0, BytePointer arg1) returns boolean;
// public extern function lto_codegen_write_merged_modules(lto_code_gen_t arg0, string arg1) returns boolean;
// public extern function lto_codegen_compile(lto_code_gen_t arg0, SizeTPointer arg1) returns Pointer;
// public extern function lto_codegen_compile_to_file(lto_code_gen_t arg0, BytePointer arg1) returns boolean;
// public extern function lto_codegen_compile_to_file(lto_code_gen_t arg0, byte[] arg1) returns boolean;
// public extern function lto_codegen_compile_to_file(lto_code_gen_t arg0, ByteBuffer arg1) returns boolean;
// public extern function lto_codegen_compile_to_file(lto_code_gen_t arg0, PointerPointer arg1) returns boolean;
// public extern function lto_codegen_optimize(lto_code_gen_t arg0) returns boolean;
// public extern function lto_codegen_compile_optimized(lto_code_gen_t arg0, SizeTPointer arg1) returns Pointer;
// public extern function lto_api_version() returns int;
// public extern function lto_codegen_debug_options(lto_code_gen_t arg0, string arg1);
// public extern function lto_codegen_debug_options(lto_code_gen_t arg0, BytePointer arg1);
// public extern function lto_initialize_disassembler();
// public extern function lto_codegen_set_should_internalize(lto_code_gen_t arg0, boolean arg1);
// public extern function lto_codegen_set_should_embed_uselists(lto_code_gen_t arg0, boolean arg1);
// public extern function thinlto_create_codegen() returns thinlto_code_gen_t;
// public extern function thinlto_codegen_dispose(thinlto_code_gen_t arg0);
// public extern function thinlto_codegen_add_module(thinlto_code_gen_t arg0, BytePointer arg1, BytePointer arg2, int arg3);
// public extern function thinlto_codegen_add_module(thinlto_code_gen_t arg0, string arg1, string arg2, int arg3);
// public extern function thinlto_codegen_process(thinlto_code_gen_t arg0);
// public extern function thinlto_module_get_num_objects(thinlto_code_gen_t arg0) returns int;
// public extern function thinlto_module_get_object(thinlto_code_gen_t arg0, int arg1) returns LTOObjectBuffer;
// public extern function thinlto_module_get_num_object_files(thinlto_code_gen_t arg0) returns int;
// public extern function thinlto_module_get_object_file(thinlto_code_gen_t arg0, int arg1) returns BytePointer;
// public extern function thinlto_codegen_set_pic_model(thinlto_code_gen_t arg0, int arg1) returns boolean;
// public extern function thinlto_codegen_set_savetemps_dir(thinlto_code_gen_t arg0, BytePointer arg1);
// public extern function thinlto_codegen_set_savetemps_dir(thinlto_code_gen_t arg0, string arg1);
// public extern function thinlto_set_generated_objects_dir(thinlto_code_gen_t arg0, string arg1);
// public extern function thinlto_set_generated_objects_dir(thinlto_code_gen_t arg0, BytePointer arg1);
// public extern function thinlto_codegen_set_cpu(thinlto_code_gen_t arg0, BytePointer arg1);
// public extern function thinlto_codegen_set_cpu(thinlto_code_gen_t arg0, string arg1);
// public extern function thinlto_codegen_disable_codegen(thinlto_code_gen_t arg0, boolean arg1);
// public extern function thinlto_codegen_set_codegen_only(thinlto_code_gen_t arg0, boolean arg1);
// public extern function thinlto_debug_options(ByteBuffer arg0, int arg1);
// public extern function thinlto_debug_options(byte[] arg0, int arg1);
// public extern function thinlto_debug_options(PointerPointer arg0, int arg1);
// public extern function thinlto_debug_options(BytePointer arg0, int arg1);
// public extern function lto_module_is_thinlto(lto_module_t arg0) returns boolean;
// public extern function thinlto_codegen_add_must_preserve_symbol(thinlto_code_gen_t arg0, BytePointer arg1, int arg2);
// public extern function thinlto_codegen_add_must_preserve_symbol(thinlto_code_gen_t arg0, string arg1, int arg2);
// public extern function thinlto_codegen_add_cross_referenced_symbol(thinlto_code_gen_t arg0, string arg1, int arg2);
// public extern function thinlto_codegen_add_cross_referenced_symbol(thinlto_code_gen_t arg0, BytePointer arg1, int arg2);
// public extern function thinlto_codegen_set_cache_dir(thinlto_code_gen_t arg0, BytePointer arg1);
// public extern function thinlto_codegen_set_cache_dir(thinlto_code_gen_t arg0, string arg1);
// public extern function thinlto_codegen_set_cache_pruning_interval(thinlto_code_gen_t arg0, int arg1);
// public extern function thinlto_codegen_set_final_cache_size_relative_to_available_space(thinlto_code_gen_t arg0, int arg1);
// public extern function thinlto_codegen_set_cache_entry_expiration(thinlto_code_gen_t arg0, int arg1);
// public extern function LLVMCreateObjectFile(LLVMMemoryBufferRef arg0) returns LLVMObjectFileRef;
// public extern function LLVMDisposeObjectFile(LLVMObjectFileRef arg0);
// public extern function LLVMGetSections(LLVMObjectFileRef arg0) returns LLVMSectionIteratorRef;
// public extern function LLVMDisposeSectionIterator(LLVMSectionIteratorRef arg0);
// public extern function LLVMIsSectionIteratorAtEnd(LLVMObjectFileRef arg0, LLVMSectionIteratorRef arg1) returns int;
// public extern function LLVMMoveToNextSection(LLVMSectionIteratorRef arg0);
// public extern function LLVMMoveToContainingSection(LLVMSectionIteratorRef arg0, LLVMSymbolIteratorRef arg1);
// public extern function LLVMGetSymbols(LLVMObjectFileRef arg0) returns LLVMSymbolIteratorRef;
// public extern function LLVMDisposeSymbolIterator(LLVMSymbolIteratorRef arg0);
// public extern function LLVMIsSymbolIteratorAtEnd(LLVMObjectFileRef arg0, LLVMSymbolIteratorRef arg1) returns int;
// public extern function LLVMMoveToNextSymbol(LLVMSymbolIteratorRef arg0);
// public extern function LLVMGetSectionName(LLVMSectionIteratorRef arg0) returns BytePointer;
// public extern function LLVMGetSectionSize(LLVMSectionIteratorRef arg0) returns long;
// public extern function LLVMGetSectionContents(LLVMSectionIteratorRef arg0) returns BytePointer;
// public extern function LLVMGetSectionAddress(LLVMSectionIteratorRef arg0) returns long;
// public extern function LLVMGetSectionContainsSymbol(LLVMSectionIteratorRef arg0, LLVMSymbolIteratorRef arg1) returns int;
// public extern function LLVMGetRelocations(LLVMSectionIteratorRef arg0) returns LLVMRelocationIteratorRef;
// public extern function LLVMDisposeRelocationIterator(LLVMRelocationIteratorRef arg0);
// public extern function LLVMIsRelocationIteratorAtEnd(LLVMSectionIteratorRef arg0, LLVMRelocationIteratorRef arg1) returns int;
// public extern function LLVMMoveToNextRelocation(LLVMRelocationIteratorRef arg0);
// public extern function LLVMGetSymbolName(LLVMSymbolIteratorRef arg0) returns BytePointer;
// public extern function LLVMGetSymbolAddress(LLVMSymbolIteratorRef arg0) returns long;
// public extern function LLVMGetSymbolSize(LLVMSymbolIteratorRef arg0) returns long;
// public extern function LLVMGetRelocationOffset(LLVMRelocationIteratorRef arg0) returns long;
// public extern function LLVMGetRelocationSymbol(LLVMRelocationIteratorRef arg0) returns LLVMSymbolIteratorRef;
// public extern function LLVMGetRelocationType(LLVMRelocationIteratorRef arg0) returns long;
// public extern function LLVMGetRelocationTypeName(LLVMRelocationIteratorRef arg0) returns BytePointer;
// public extern function LLVMGetRelocationValueString(LLVMRelocationIteratorRef arg0) returns BytePointer;
// public extern function LLVMInitializeAllTargetInfos();
// public extern function LLVMInitializeAllTargets();
// public extern function LLVMInitializeAllTargetMCs();
// public extern function LLVMInitializeAllAsmPrinters();
// public extern function LLVMInitializeAllAsmParsers();
// public extern function LLVMInitializeAllDisassemblers();
// public extern function LLVMInitializeNativeTarget() returns int;
// public extern function LLVMInitializeNativeAsmParser() returns int;
// public extern function LLVMInitializeNativeAsmPrinter() returns int;
// public extern function LLVMInitializeNativeDisassembler() returns int;
// public extern function LLVMGetModuleDataLayout(LLVMModuleRef arg0) returns LLVMTargetDataRef;
// public extern function LLVMSetModuleDataLayout(LLVMModuleRef arg0, LLVMTargetDataRef arg1);
// public extern function LLVMCreateTargetData(BytePointer arg0) returns LLVMTargetDataRef;
// public extern function LLVMCreateTargetData(string arg0) returns LLVMTargetDataRef;
// public extern function LLVMDisposeTargetData(LLVMTargetDataRef arg0);
// public extern function LLVMAddTargetLibraryInfo(LLVMTargetLibraryInfoRef arg0, LLVMPassManagerRef arg1);
// public extern function LLVMCopyStringRepOfTargetData(LLVMTargetDataRef arg0) returns BytePointer;
// public extern function LLVMByteOrder(LLVMTargetDataRef arg0) returns int;
// public extern function LLVMPointerSize(LLVMTargetDataRef arg0) returns int;
// public extern function LLVMPointerSizeForAS(LLVMTargetDataRef arg0, int arg1) returns int;
// public extern function LLVMIntPtrType(LLVMTargetDataRef arg0) returns LLVMTypeRef;
// public extern function LLVMIntPtrTypeForAS(LLVMTargetDataRef arg0, int arg1) returns LLVMTypeRef;
// public extern function LLVMIntPtrTypeInContext(LLVMContextRef arg0, LLVMTargetDataRef arg1) returns LLVMTypeRef;
// public extern function LLVMIntPtrTypeForASInContext(LLVMContextRef arg0, LLVMTargetDataRef arg1, int arg2) returns LLVMTypeRef;
// public extern function LLVMSizeOfTypeInBits(LLVMTargetDataRef arg0, LLVMTypeRef arg1) returns long;
// public extern function LLVMStoreSizeOfType(LLVMTargetDataRef arg0, LLVMTypeRef arg1) returns long;
// public extern function LLVMABISizeOfType(LLVMTargetDataRef arg0, LLVMTypeRef arg1) returns long;
// public extern function LLVMABIAlignmentOfType(LLVMTargetDataRef arg0, LLVMTypeRef arg1) returns int;
// public extern function LLVMCallFrameAlignmentOfType(LLVMTargetDataRef arg0, LLVMTypeRef arg1) returns int;
// public extern function LLVMPreferredAlignmentOfType(LLVMTargetDataRef arg0, LLVMTypeRef arg1) returns int;
// public extern function LLVMPreferredAlignmentOfGlobal(LLVMTargetDataRef arg0, LLVMValueRef arg1) returns int;
// public extern function LLVMElementAtOffset(LLVMTargetDataRef arg0, LLVMTypeRef arg1, long arg2) returns int;
// public extern function LLVMOffsetOfElement(LLVMTargetDataRef arg0, LLVMTypeRef arg1, int arg2) returns long;
// public extern function LLVMGetFirstTarget() returns LLVMTargetRef;
// public extern function LLVMGetNextTarget(LLVMTargetRef arg0) returns LLVMTargetRef;
// public extern function LLVMGetTargetFromName(BytePointer arg0) returns LLVMTargetRef;
// public extern function LLVMGetTargetFromName(string arg0) returns LLVMTargetRef;
// public extern function LLVMGetTargetFromTriple(BytePointer arg0, LLVMTargetRef arg1, byte[] arg2) returns int;
// public extern function LLVMGetTargetFromTriple(string arg0, PointerPointer arg1, BytePointer arg2) returns int;
// public extern function LLVMGetTargetFromTriple(BytePointer arg0, LLVMTargetRef arg1, ByteBuffer arg2) returns int;
// public extern function LLVMGetTargetFromTriple(string arg0, PointerPointer arg1, byte[] arg2) returns int;
// public extern function LLVMGetTargetFromTriple(BytePointer arg0, LLVMTargetRef arg1, PointerPointer arg2) returns int;
// public extern function LLVMGetTargetFromTriple(BytePointer arg0, LLVMTargetRef arg1, BytePointer arg2) returns int;
// public extern function LLVMGetTargetFromTriple(string arg0, PointerPointer arg1, ByteBuffer arg2) returns int;
// public extern function LLVMGetTargetName(LLVMTargetRef arg0) returns BytePointer;
// public extern function LLVMGetTargetDescription(LLVMTargetRef arg0) returns BytePointer;
// public extern function LLVMTargetHasJIT(LLVMTargetRef arg0) returns int;
// public extern function LLVMTargetHasTargetMachine(LLVMTargetRef arg0) returns int;
// public extern function LLVMTargetHasAsmBackend(LLVMTargetRef arg0) returns int;
// public extern function LLVMCreateTargetMachine(LLVMTargetRef arg0, string arg1, string arg2, string arg3, int arg4, int arg5, int arg6) returns LLVMTargetMachineRef;
// public extern function LLVMCreateTargetMachine(LLVMTargetRef arg0, BytePointer arg1, BytePointer arg2, BytePointer arg3, int arg4, int arg5, int arg6) returns LLVMTargetMachineRef;
// public extern function LLVMDisposeTargetMachine(LLVMTargetMachineRef arg0);
// public extern function LLVMGetTargetMachineTarget(LLVMTargetMachineRef arg0) returns LLVMTargetRef;
// public extern function LLVMGetTargetMachineTriple(LLVMTargetMachineRef arg0) returns BytePointer;
// public extern function LLVMGetTargetMachineCPU(LLVMTargetMachineRef arg0) returns BytePointer;
// public extern function LLVMGetTargetMachineFeatureString(LLVMTargetMachineRef arg0) returns BytePointer;
// public extern function LLVMCreateTargetDataLayout(LLVMTargetMachineRef arg0) returns LLVMTargetDataRef;
// public extern function LLVMSetTargetMachineAsmVerbosity(LLVMTargetMachineRef arg0, int arg1);
// public extern function LLVMTargetMachineEmitToFile(LLVMTargetMachineRef arg0, LLVMModuleRef arg1, BytePointer arg2, int arg3, BytePointer arg4) returns int;
// public extern function LLVMTargetMachineEmitToFile(LLVMTargetMachineRef arg0, LLVMModuleRef arg1, byte[] arg2, int arg3, byte[] arg4) returns int;
// public extern function LLVMTargetMachineEmitToFile(LLVMTargetMachineRef arg0, LLVMModuleRef arg1, ByteBuffer arg2, int arg3, ByteBuffer arg4) returns int;
// public extern function LLVMTargetMachineEmitToFile(LLVMTargetMachineRef arg0, LLVMModuleRef arg1, BytePointer arg2, int arg3, PointerPointer arg4) returns int;
// public extern function LLVMTargetMachineEmitToMemoryBuffer(LLVMTargetMachineRef arg0, LLVMModuleRef arg1, int arg2, byte[] arg3, LLVMMemoryBufferRef arg4) returns int;
// public extern function LLVMTargetMachineEmitToMemoryBuffer(LLVMTargetMachineRef arg0, LLVMModuleRef arg1, int arg2, BytePointer arg3, PointerPointer arg4) returns int;
// public extern function LLVMTargetMachineEmitToMemoryBuffer(LLVMTargetMachineRef arg0, LLVMModuleRef arg1, int arg2, ByteBuffer arg3, LLVMMemoryBufferRef arg4) returns int;
// public extern function LLVMTargetMachineEmitToMemoryBuffer(LLVMTargetMachineRef arg0, LLVMModuleRef arg1, int arg2, byte[] arg3, PointerPointer arg4) returns int;
// public extern function LLVMTargetMachineEmitToMemoryBuffer(LLVMTargetMachineRef arg0, LLVMModuleRef arg1, int arg2, PointerPointer arg3, LLVMMemoryBufferRef arg4) returns int;
// public extern function LLVMTargetMachineEmitToMemoryBuffer(LLVMTargetMachineRef arg0, LLVMModuleRef arg1, int arg2, BytePointer arg3, LLVMMemoryBufferRef arg4) returns int;
// public extern function LLVMTargetMachineEmitToMemoryBuffer(LLVMTargetMachineRef arg0, LLVMModuleRef arg1, int arg2, ByteBuffer arg3, PointerPointer arg4) returns int;
// public extern function LLVMGetDefaultTargetTriple() returns BytePointer;
// public extern function LLVMAddAnalysisPasses(LLVMTargetMachineRef arg0, LLVMPassManagerRef arg1);
// public extern function LLVMLinkInMCJIT();
// public extern function LLVMLinkInInterpreter();
// public extern function LLVMCreateGenericValueOfInt(LLVMTypeRef arg0, long arg1, int arg2) returns LLVMGenericValueRef;
// public extern function LLVMCreateGenericValueOfPointer(Pointer arg0) returns LLVMGenericValueRef;
// public extern function LLVMCreateGenericValueOfFloat(LLVMTypeRef arg0, double arg1) returns LLVMGenericValueRef;
// public extern function LLVMGenericValueIntWidth(LLVMGenericValueRef arg0) returns int;
// public extern function LLVMGenericValueToInt(LLVMGenericValueRef arg0, int arg1) returns long;
// public extern function LLVMGenericValueToPointer(LLVMGenericValueRef arg0) returns Pointer;
// public extern function LLVMGenericValueToFloat(LLVMTypeRef arg0, LLVMGenericValueRef arg1) returns double;
// public extern function LLVMDisposeGenericValue(LLVMGenericValueRef arg0);
// public extern function LLVMCreateExecutionEngineForModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, byte[] arg2) returns int;
// public extern function LLVMCreateExecutionEngineForModule(PointerPointer arg0, LLVMModuleRef arg1, ByteBuffer arg2) returns int;
// public extern function LLVMCreateExecutionEngineForModule(PointerPointer arg0, LLVMModuleRef arg1, BytePointer arg2) returns int;
// public extern function LLVMCreateExecutionEngineForModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, ByteBuffer arg2) returns int;
// public extern function LLVMCreateExecutionEngineForModule(PointerPointer arg0, LLVMModuleRef arg1, byte[] arg2) returns int;
// public extern function LLVMCreateExecutionEngineForModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, PointerPointer arg2) returns int;
// public extern function LLVMCreateExecutionEngineForModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, BytePointer arg2) returns int;
// public extern function LLVMCreateInterpreterForModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, byte[] arg2) returns int;
// public extern function LLVMCreateInterpreterForModule(PointerPointer arg0, LLVMModuleRef arg1, BytePointer arg2) returns int;
// public extern function LLVMCreateInterpreterForModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, ByteBuffer arg2) returns int;
// public extern function LLVMCreateInterpreterForModule(PointerPointer arg0, LLVMModuleRef arg1, byte[] arg2) returns int;
// public extern function LLVMCreateInterpreterForModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, PointerPointer arg2) returns int;
// public extern function LLVMCreateInterpreterForModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, BytePointer arg2) returns int;
// public extern function LLVMCreateInterpreterForModule(PointerPointer arg0, LLVMModuleRef arg1, ByteBuffer arg2) returns int;
// public extern function LLVMCreateJITCompilerForModule(PointerPointer arg0, LLVMModuleRef arg1, int arg2, BytePointer arg3) returns int;
// public extern function LLVMCreateJITCompilerForModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, int arg2, byte[] arg3) returns int;
// public extern function LLVMCreateJITCompilerForModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, int arg2, ByteBuffer arg3) returns int;
// public extern function LLVMCreateJITCompilerForModule(PointerPointer arg0, LLVMModuleRef arg1, int arg2, byte[] arg3) returns int;
// public extern function LLVMCreateJITCompilerForModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, int arg2, PointerPointer arg3) returns int;
// public extern function LLVMCreateJITCompilerForModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, int arg2, BytePointer arg3) returns int;
// public extern function LLVMCreateJITCompilerForModule(PointerPointer arg0, LLVMModuleRef arg1, int arg2, ByteBuffer arg3) returns int;
// public extern function LLVMInitializeMCJITCompilerOptions(LLVMMCJITCompilerOptions arg0, long arg1);
// public extern function LLVMCreateMCJITCompilerForModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, LLVMMCJITCompilerOptions arg2, long arg3, byte[] arg4) returns int;
// public extern function LLVMCreateMCJITCompilerForModule(PointerPointer arg0, LLVMModuleRef arg1, LLVMMCJITCompilerOptions arg2, long arg3, BytePointer arg4) returns int;
// public extern function LLVMCreateMCJITCompilerForModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, LLVMMCJITCompilerOptions arg2, long arg3, ByteBuffer arg4) returns int;
// public extern function LLVMCreateMCJITCompilerForModule(PointerPointer arg0, LLVMModuleRef arg1, LLVMMCJITCompilerOptions arg2, long arg3, byte[] arg4) returns int;
// public extern function LLVMCreateMCJITCompilerForModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, LLVMMCJITCompilerOptions arg2, long arg3, PointerPointer arg4) returns int;
// public extern function LLVMCreateMCJITCompilerForModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, LLVMMCJITCompilerOptions arg2, long arg3, BytePointer arg4) returns int;
// public extern function LLVMCreateMCJITCompilerForModule(PointerPointer arg0, LLVMModuleRef arg1, LLVMMCJITCompilerOptions arg2, long arg3, ByteBuffer arg4) returns int;
// public extern function LLVMDisposeExecutionEngine(LLVMExecutionEngineRef arg0);
// public extern function LLVMRunStaticConstructors(LLVMExecutionEngineRef arg0);
// public extern function LLVMRunStaticDestructors(LLVMExecutionEngineRef arg0);
// public extern function LLVMRunFunctionAsMain(LLVMExecutionEngineRef arg0, LLVMValueRef arg1, int arg2, ByteBuffer arg3, ByteBuffer arg4) returns int;
// public extern function LLVMRunFunctionAsMain(LLVMExecutionEngineRef arg0, LLVMValueRef arg1, int arg2, BytePointer arg3, BytePointer arg4) returns int;
// public extern function LLVMRunFunctionAsMain(LLVMExecutionEngineRef arg0, LLVMValueRef arg1, int arg2, byte[] arg3, byte[] arg4) returns int;
// public extern function LLVMRunFunctionAsMain(LLVMExecutionEngineRef arg0, LLVMValueRef arg1, int arg2, PointerPointer arg3, PointerPointer arg4) returns int;
// public extern function LLVMRunFunction(LLVMExecutionEngineRef arg0, LLVMValueRef arg1, int arg2, PointerPointer arg3) returns LLVMGenericValueRef;
// public extern function LLVMRunFunction(LLVMExecutionEngineRef arg0, LLVMValueRef arg1, int arg2, LLVMGenericValueRef arg3) returns LLVMGenericValueRef;
// public extern function LLVMFreeMachineCodeForFunction(LLVMExecutionEngineRef arg0, LLVMValueRef arg1);
// public extern function LLVMAddModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1);
// public extern function LLVMRemoveModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, LLVMModuleRef arg2, byte[] arg3) returns int;
// public extern function LLVMRemoveModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, PointerPointer arg2, BytePointer arg3) returns int;
// public extern function LLVMRemoveModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, LLVMModuleRef arg2, ByteBuffer arg3) returns int;
// public extern function LLVMRemoveModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, PointerPointer arg2, byte[] arg3) returns int;
// public extern function LLVMRemoveModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, LLVMModuleRef arg2, PointerPointer arg3) returns int;
// public extern function LLVMRemoveModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, LLVMModuleRef arg2, BytePointer arg3) returns int;
// public extern function LLVMRemoveModule(LLVMExecutionEngineRef arg0, LLVMModuleRef arg1, PointerPointer arg2, ByteBuffer arg3) returns int;
// public extern function LLVMFindFunction(LLVMExecutionEngineRef arg0, string arg1, PointerPointer arg2) returns int;
// public extern function LLVMFindFunction(LLVMExecutionEngineRef arg0, BytePointer arg1, LLVMValueRef arg2) returns int;
// public extern function LLVMRecompileAndRelinkFunction(LLVMExecutionEngineRef arg0, LLVMValueRef arg1) returns Pointer;
// public extern function LLVMGetExecutionEngineTargetData(LLVMExecutionEngineRef arg0) returns LLVMTargetDataRef;
// public extern function LLVMGetExecutionEngineTargetMachine(LLVMExecutionEngineRef arg0) returns LLVMTargetMachineRef;
// public extern function LLVMAddGlobalMapping(LLVMExecutionEngineRef arg0, LLVMValueRef arg1, Pointer arg2);
// public extern function LLVMGetPointerToGlobal(LLVMExecutionEngineRef arg0, LLVMValueRef arg1) returns Pointer;
// public extern function LLVMGetGlobalValueAddress(LLVMExecutionEngineRef arg0, BytePointer arg1) returns long;
// public extern function LLVMGetGlobalValueAddress(LLVMExecutionEngineRef arg0, string arg1) returns long;
// public extern function LLVMGetFunctionAddress(LLVMExecutionEngineRef arg0, string arg1) returns long;
// public extern function LLVMGetFunctionAddress(LLVMExecutionEngineRef arg0, BytePointer arg1) returns long;
// public extern function LLVMCreateSimpleMCJITMemoryManager(Pointer arg0, LLVMMemoryManagerAllocateCodeSectionCallback arg1, LLVMMemoryManagerAllocateDataSectionCallback arg2, LLVMMemoryManagerFinalizeMemoryCallback arg3, LLVMMemoryManagerDestroyCallback arg4) returns LLVMMCJITMemoryManagerRef;
// public extern function LLVMDisposeMCJITMemoryManager(LLVMMCJITMemoryManagerRef arg0);
// public extern function LLVMAddArgumentPromotionPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddConstantMergePass(LLVMPassManagerRef arg0);
// public extern function LLVMAddCalledValuePropagationPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddDeadArgEliminationPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddFunctionAttrsPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddFunctionInliningPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddAlwaysInlinerPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddGlobalDCEPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddGlobalOptimizerPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddIPConstantPropagationPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddPruneEHPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddIPSCCPPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddInternalizePass(LLVMPassManagerRef arg0, int arg1);
// public extern function LLVMAddStripDeadPrototypesPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddStripSymbolsPass(LLVMPassManagerRef arg0);
// public extern function LLVMPassManagerBuilderCreate() returns LLVMPassManagerBuilderRef;
// public extern function LLVMPassManagerBuilderDispose(LLVMPassManagerBuilderRef arg0);
// public extern function LLVMPassManagerBuilderSetOptLevel(LLVMPassManagerBuilderRef arg0, int arg1);
// public extern function LLVMPassManagerBuilderSetSizeLevel(LLVMPassManagerBuilderRef arg0, int arg1);
// public extern function LLVMPassManagerBuilderSetDisableUnitAtATime(LLVMPassManagerBuilderRef arg0, int arg1);
// public extern function LLVMPassManagerBuilderSetDisableUnrollLoops(LLVMPassManagerBuilderRef arg0, int arg1);
// public extern function LLVMPassManagerBuilderSetDisableSimplifyLibCalls(LLVMPassManagerBuilderRef arg0, int arg1);
// public extern function LLVMPassManagerBuilderUseInlinerWithThreshold(LLVMPassManagerBuilderRef arg0, int arg1);
// public extern function LLVMPassManagerBuilderPopulateFunctionPassManager(LLVMPassManagerBuilderRef arg0, LLVMPassManagerRef arg1);
// public extern function LLVMPassManagerBuilderPopulateModulePassManager(LLVMPassManagerBuilderRef arg0, LLVMPassManagerRef arg1);
// public extern function LLVMPassManagerBuilderPopulateLTOPassManager(LLVMPassManagerBuilderRef arg0, LLVMPassManagerRef arg1, int arg2, int arg3);
// public extern function LLVMAddAggressiveDCEPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddBitTrackingDCEPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddAlignmentFromAssumptionsPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddCFGSimplificationPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddDeadStoreEliminationPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddScalarizerPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddMergedLoadStoreMotionPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddGVNPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddNewGVNPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddIndVarSimplifyPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddInstructionCombiningPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddJumpThreadingPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddLICMPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddLoopDeletionPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddLoopIdiomPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddLoopRotatePass(LLVMPassManagerRef arg0);
// public extern function LLVMAddLoopRerollPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddLoopUnrollPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddLoopUnswitchPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddMemCpyOptPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddPartiallyInlineLibCallsPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddLowerSwitchPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddPromoteMemoryToRegisterPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddReassociatePass(LLVMPassManagerRef arg0);
// public extern function LLVMAddSCCPPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddScalarReplAggregatesPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddScalarReplAggregatesPassSSA(LLVMPassManagerRef arg0);
// public extern function LLVMAddScalarReplAggregatesPassWithThreshold(LLVMPassManagerRef arg0, int arg1);
// public extern function LLVMAddSimplifyLibCallsPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddTailCallEliminationPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddConstantPropagationPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddDemoteMemoryToRegisterPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddVerifierPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddCorrelatedValuePropagationPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddEarlyCSEPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddEarlyCSEMemSSAPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddLowerExpectIntrinsicPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddTypeBasedAliasAnalysisPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddScopedNoAliasAAPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddBasicAliasAnalysisPass(LLVMPassManagerRef arg0);
// public extern function LLVMAddBBVectorizePass(LLVMPassManagerRef arg0);
// public extern function LLVMAddLoopVectorizePass(LLVMPassManagerRef arg0);
// public extern function LLVMAddSLPVectorizePass(LLVMPassManagerRef arg0);
